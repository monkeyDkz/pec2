#!/bin/bash

# ===============================================
# TESTS COMPLETS - WORKFLOW DE PAIEMENT PSP
# ===============================================
# Script de validation compl√®te du syst√®me de paiement selon cahier des charges
# üî¥ Workflow Synchrone : Transaction ‚Üí URL ‚Üí Client ‚Üí Confirmation
# üü¢ Workflow Asynchrone : PSP ‚Üí Op√©ration ‚Üí Webhook ‚Üí Notification
# Usage: ./test-workflow.sh

set -e  # Arr√™t en cas d'erreur

# Configuration
BACKEND_URL="http://localhost:3000"
PSP_URL="http://localhost:3002"
API_KEY="tech_shop_api_key_123456789abcdef"
API_SECRET="tech_shop_api_secret_987654321fedcba0123456789abcdef"

echo "üöÄ ================================================================"
echo "üöÄ TESTS WORKFLOW COMPLET DE PAIEMENT - CAHIER DES CHARGES"
echo "üöÄ üî¥ Synchrone: Transaction ‚Üí URL ‚Üí Client ‚Üí Confirmation"
echo "üöÄ üü¢ Asynchrone: PSP ‚Üí Capture/Refund ‚Üí Webhook ‚Üí Notification"
echo "üöÄ ================================================================"

# Fonction utilitaire pour attendre et afficher un d√©lai
wait_for_processing() {
    local seconds=$1
    local message=${2:-"Traitement en cours"}
    echo "‚è≥ $message..."
    for i in $(seq 1 $seconds); do
        echo -n "."
        sleep 1
    done
    echo " ‚úÖ D√©lai termin√©"
}

# Fonction pour v√©rifier le succ√®s d'une r√©ponse JSON
check_response_success() {
    local response="$1"
    local operation_name="$2"
    
    local success=$(echo "$response" | jq -r '.success // false')
    if [ "$success" != "true" ]; then
        echo "‚ùå ERREUR dans $operation_name:"
        echo "$response" | jq '.'
        exit 1
    fi
}

# Compteur d'√©tapes
STEP=1
echo_step() {
    echo ""
    echo "üìã $STEP. $1"
    echo "$(printf '=%.0s' {1..60})"
    STEP=$((STEP + 1))
}

echo_step "V√âRIFICATION DE L'√âTAT DES SERVICES"
echo "üî∏ Backend principal..."
BACKEND_HEALTH=$(curl -s $BACKEND_URL/health)
echo "‚úÖ Backend: $(echo $BACKEND_HEALTH | jq -r '.message')"

echo "üî∏ PSP √©mulateur..."
PSP_HEALTH=$(curl -s $PSP_URL/health)
echo "‚úÖ PSP: $(echo $PSP_HEALTH | jq -r '.service // .message')"

echo "üî∏ API PSP paiement..."
PSP_PAYMENT_HEALTH=$(curl -s $PSP_URL/api/payment/health)
echo "‚úÖ PSP Payment API: $(echo $PSP_PAYMENT_HEALTH | jq -r '.service')"

echo_step "ÔøΩ WORKFLOW SYNCHRONE - AUTHENTIFICATION ET √âTAT INITIAL"
echo "üî∏ Test d'authentification marchand TechShop..."
INITIAL_TRANSACTIONS=$(curl -s -H "X-API-ID: $API_KEY" -H "X-API-SECRET: $API_SECRET" $BACKEND_URL/api/transactions)
check_response_success "$INITIAL_TRANSACTIONS" "Authentification"

INITIAL_COUNT=$(echo $INITIAL_TRANSACTIONS | jq '.data.pagination.total')
echo "‚úÖ Authentification r√©ussie - Transactions existantes: $INITIAL_COUNT"

echo_step "ÔøΩ WORKFLOW SYNCHRONE - CR√âATION TRANSACTION MARCHAND"
echo "üî∏ Le marchand TechShop cr√©e une transaction pour un achat client..."

# G√©n√©rer un order_id unique pour √©viter les conflits
ORDER_ID="ORDER_WORKFLOW_$(date +%s)"

NEW_TRANSACTION=$(curl -s -X POST $BACKEND_URL/api/transactions \
  -H "Content-Type: application/json" \
  -H "X-API-ID: $API_KEY" \
  -H "X-API-SECRET: $API_SECRET" \
  -d '{
    "order_id": "'$ORDER_ID'",
    "amount": 149.99,
    "currency": "EUR",
    "customer_email": "jean.dupont@example.com",
    "customer_first_name": "Jean",
    "customer_last_name": "Dupont",
    "description": "Casque Gaming Pro XL - TechShop",
    "success_url": "https://techshop.example.com/payment/success",
    "cancel_url": "https://techshop.example.com/payment/cancel",
    "webhook_url": "https://techshop.example.com/webhook/payment",
    "billing_address": {
      "street": "123 Rue de la Paix",
      "city": "Paris",
      "postal_code": "75001",
      "country": "FR"
    },
    "metadata": {
      "product_id": "gaming-headset-xl",
      "campaign": "black-friday-2024"
    }
  }')

check_response_success "$NEW_TRANSACTION" "Cr√©ation de transaction"

TRANSACTION_ID=$(echo $NEW_TRANSACTION | jq -r '.data.transaction_id')
PAYMENT_URL=$(echo $NEW_TRANSACTION | jq -r '.data.payment_url')
PAYMENT_TOKEN=$(echo $PAYMENT_URL | sed 's/.*token=\([^&]*\).*/\1/')

echo "‚úÖ Transaction cr√©√©e avec succ√®s:"
echo "   üìä ID: $TRANSACTION_ID"
echo "   üé´ Token: $PAYMENT_TOKEN"
echo "   üåê URL: $PAYMENT_URL"
echo "   üí∞ Montant: 149.99 EUR"
echo "   üõí Commande: $ORDER_ID"

echo_step "üî¥ WORKFLOW SYNCHRONE - V√âRIFICATION TRANSACTION"
echo "üî∏ V√©rification que la transaction est bien en base avec statut 'pending'..."

TRANSACTION_DETAILS=$(curl -s -H "X-API-ID: $API_KEY" -H "X-API-SECRET: $API_SECRET" \
  "$BACKEND_URL/api/transactions/$TRANSACTION_ID")
check_response_success "$TRANSACTION_DETAILS" "R√©cup√©ration transaction"

TRANSACTION_STATUS=$(echo $TRANSACTION_DETAILS | jq -r '.data.status')
OPERATIONS_COUNT=$(echo $TRANSACTION_DETAILS | jq '.data.operations | length')

echo "‚úÖ Transaction v√©rifi√©e:"
echo "   ÔøΩ Statut: $TRANSACTION_STATUS"
echo "   üîÑ Op√©rations: $OPERATIONS_COUNT"

if [ "$TRANSACTION_STATUS" != "pending" ]; then
    echo "‚ùå ERREUR: Transaction devrait √™tre en statut 'pending', trouv√©: $TRANSACTION_STATUS"
    exit 1
fi

echo_step "üü¢ WORKFLOW ASYNCHRONE - PAIEMENT R√âUSSI (CAPTURE)"
echo "üî∏ Simulation: Le client confirme le paiement avec sa carte Visa..."
echo "üî∏ Envoi au backend qui va cr√©er l'op√©ration et envoyer au PSP..."

wait_for_processing 2 "Pr√©paration du paiement"

# Le client confirme le paiement via l'interface backend (pas directement PSP!)
PAYMENT_CONFIRMATION=$(curl -s -X POST "$BACKEND_URL/api/transactions/$TRANSACTION_ID/process" \
  -H "Content-Type: application/json" \
  -d '{
    "token": "'$PAYMENT_TOKEN'",
    "payment_method": {
      "type": "card",
      "card_number": "4111111111111111",
      "cardholder_name": "Jean Dupont",
      "expiry_month": "12",
      "expiry_year": "2027",
      "cvv": "123"
    }
  }')

check_response_success "$PAYMENT_CONFIRMATION" "Confirmation de paiement"

OPERATION_ID_SUCCESS=$(echo $PAYMENT_CONFIRMATION | jq -r '.data.operation_id')
PSP_REFERENCE_SUCCESS=$(echo $PAYMENT_CONFIRMATION | jq -r '.data.psp_reference')

echo "‚úÖ Paiement confirm√©:"
echo "   üî∏ Op√©ration cr√©√©e: $OPERATION_ID_SUCCESS"
echo "   üî∏ PSP Reference: $PSP_REFERENCE_SUCCESS"
echo "   üî∏ Le backend a envoy√© la demande au PSP"
echo "   üî∏ Le PSP va traiter et renvoyer un webhook"

wait_for_processing 5 "Traitement PSP et notification webhook"

echo_step "üü¢ WORKFLOW ASYNCHRONE - V√âRIFICATION OP√âRATION CAPTURE"
echo "üî∏ V√©rification que l'op√©ration 'capture' a √©t√© cr√©√©e et que le webhook a √©t√© trait√©..."

UPDATED_TRANSACTION=$(curl -s -H "X-API-ID: $API_KEY" -H "X-API-SECRET: $API_SECRET" \
  "$BACKEND_URL/api/transactions/$TRANSACTION_ID")
check_response_success "$UPDATED_TRANSACTION" "R√©cup√©ration transaction mise √† jour"

UPDATED_STATUS=$(echo $UPDATED_TRANSACTION | jq -r '.data.status')
UPDATED_OPERATIONS_COUNT=$(echo $UPDATED_TRANSACTION | jq '.data.operations | length')

echo "‚úÖ √âtat apr√®s paiement:"
echo "   üìà Statut transaction: $UPDATED_STATUS"
echo "   ÔøΩ Nombre d'op√©rations: $UPDATED_OPERATIONS_COUNT"

if [ "$UPDATED_OPERATIONS_COUNT" -gt 0 ]; then
    echo "üî∏ D√©tail des op√©rations:"
    echo $UPDATED_TRANSACTION | jq '.data.operations[] | "   üí≥ \(.type) - \(.status) - \(.amount) \(.currency) - PSP: \(.psp_reference // "N/A")"'
    
    # V√©rifier qu'il y a au moins une op√©ration capture r√©ussie
    CAPTURE_SUCCESS=$(echo $UPDATED_TRANSACTION | jq '.data.operations[] | select(.type == "capture" and .status == "success")' | jq -s 'length')
    if [ "$CAPTURE_SUCCESS" -gt 0 ]; then
        echo "‚úÖ Op√©ration capture r√©ussie trouv√©e"
    else
        echo "‚ö†Ô∏è  Aucune op√©ration capture r√©ussie trouv√©e"
    fi
fi

echo_step "üü¢ WORKFLOW ASYNCHRONE - PAIEMENT REFUS√â (TEST D'ERREUR)"
echo "üî∏ Test avec une carte d√©clin√©e pour valider la gestion d'erreur..."
echo "üî∏ Cr√©ation d'une nouvelle transaction pour tester le refus..."

# Cr√©er une nouvelle transaction pour le test de refus
DECLINED_ORDER_ID="ORDER_DECLINED_$(date +%s)"
DECLINED_TRANSACTION=$(curl -s -X POST "$BACKEND_URL/api/transactions" \
  -H "X-API-ID: $API_KEY" \
  -H "X-API-SECRET: $API_SECRET" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 99.99,
    "currency": "EUR",
    "order_id": "'$DECLINED_ORDER_ID'",
    "customer_email": "declined@test.com",
    "description": "Test paiement refus√©",
    "success_url": "https://techshop.example.com/payment/success",
    "cancel_url": "https://techshop.example.com/payment/cancel",
    "webhook_url": "https://techshop.example.com/webhook/payment"
  }')

check_response_success "$DECLINED_TRANSACTION" "Cr√©ation transaction test refus"

DECLINED_TRANSACTION_ID=$(echo $DECLINED_TRANSACTION | jq -r '.data.transaction_id')
DECLINED_PAYMENT_URL=$(echo $DECLINED_TRANSACTION | jq -r '.data.payment_url')
DECLINED_PAYMENT_TOKEN=$(echo $DECLINED_PAYMENT_URL | sed 's/.*token=\([^&]*\).*/\1/')

echo "‚úÖ Transaction de test cr√©√©e:"
echo "   üìä ID: $DECLINED_TRANSACTION_ID"
echo "   üé´ Token: $DECLINED_PAYMENT_TOKEN"

wait_for_processing 1 "Pr√©paration test refus"

# Tenter le paiement avec une carte qui sera refus√©e par le PSP
PAYMENT_DECLINED=$(curl -s -X POST "$BACKEND_URL/api/transactions/$DECLINED_TRANSACTION_ID/process" \
  -H "Content-Type: application/json" \
  -d '{
    "token": "'$DECLINED_PAYMENT_TOKEN'",
    "payment_method": {
      "type": "card",
      "card_number": "4000000000000002",
      "cardholder_name": "Test Declined",
      "expiry_month": "12",
      "expiry_year": "2027",
      "cvv": "123"
    }
  }')

check_response_success "$PAYMENT_DECLINED" "Confirmation paiement d√©clin√©"

DECLINED_OPERATION_ID=$(echo $PAYMENT_DECLINED | jq -r '.data.operation_id')
echo "‚úÖ Test de refus envoy√© - Op√©ration: $DECLINED_OPERATION_ID"

wait_for_processing 5 "Traitement du refus PSP et notification"

# V√©rifier le statut de la transaction declined
DECLINED_FINAL=$(curl -s -H "X-API-ID: $API_KEY" -H "X-API-SECRET: $API_SECRET" \
  "$BACKEND_URL/api/transactions/$DECLINED_TRANSACTION_ID")

check_response_success "$DECLINED_FINAL" "R√©cup√©ration transaction refus√©e"

DECLINED_STATUS=$(echo $DECLINED_FINAL | jq -r '.data.status')
echo "‚úÖ Transaction refus√©e:"
echo "   üìà Statut: $DECLINED_STATUS"
echo "   üí≥ Op√©rations:"
echo $DECLINED_FINAL | jq '.data.operations[] | "   üî∏ \(.type) - \(.status) - \(.amount) \(.currency)"'

echo_step "ÔøΩ WORKFLOW ASYNCHRONE - REMBOURSEMENT (REFUND)"
echo "üî∏ Test de remboursement partiel sur une op√©ration capture r√©ussie..."

# R√©cup√©rer la transaction mise √† jour
FINAL_TRANSACTION=$(curl -s -H "X-API-ID: $API_KEY" -H "X-API-SECRET: $API_SECRET" \
  "$BACKEND_URL/api/transactions/$TRANSACTION_ID")

# Trouver une op√©ration capture r√©ussie
SUCCESSFUL_CAPTURE=$(echo $FINAL_TRANSACTION | jq -r '.data.operations[] | select(.type == "capture" and .status == "success") | .psp_reference' | head -1)

if [ "$SUCCESSFUL_CAPTURE" != "null" ] && [ ! -z "$SUCCESSFUL_CAPTURE" ]; then
    echo "üî∏ Remboursement partiel de 50‚Ç¨ sur l'op√©ration: $SUCCESSFUL_CAPTURE"
    
    REFUND_RESPONSE=$(curl -s -X POST "$BACKEND_URL/api/transactions/$TRANSACTION_ID/refund" \
      -H "Content-Type: application/json" \
      -H "X-API-ID: $API_KEY" \
      -H "X-API-SECRET: $API_SECRET" \
      -d '{
        "amount": 50.00,
        "reason": "Remboursement partiel - Test workflow complet"
      }')
    
    check_response_success "$REFUND_RESPONSE" "Cr√©ation remboursement"
    
    REFUND_OPERATION_ID=$(echo $REFUND_RESPONSE | jq -r '.data.operation_id')
    echo "‚úÖ Remboursement cr√©√© - Op√©ration: $REFUND_OPERATION_ID"
    echo "‚úÖ Le backend va cr√©er l'op√©ration 'refund' et l'envoyer au PSP"
    
    wait_for_processing 3 "Traitement du remboursement backend vers PSP"
else
    echo "‚ö†Ô∏è  Aucune op√©ration capture r√©ussie trouv√©e - skip du test de remboursement"
fi

echo_step "V√âRIFICATION FINALE DU WORKFLOW COMPLET"
echo "üî∏ √âtat final du syst√®me apr√®s tous les tests..."

FINAL_RESULT=$(curl -s -H "X-API-ID: $API_KEY" -H "X-API-SECRET: $API_SECRET" \
  "$BACKEND_URL/api/transactions/$TRANSACTION_ID")

FINAL_STATUS=$(echo $FINAL_RESULT | jq -r '.data.status')
FINAL_OPERATIONS=$(echo $FINAL_RESULT | jq '.data.operations | length')

echo "‚úÖ R√âSUM√â FINAL:"
echo "   üìä Transaction ID: $TRANSACTION_ID"
echo "   üìà Statut final: $FINAL_STATUS"
echo "   üîÑ Total op√©rations: $FINAL_OPERATIONS"
echo "   üåê URL de paiement: $PAYMENT_URL"

if [ "$FINAL_OPERATIONS" -gt 0 ]; then
    echo ""
    echo "üî∏ HISTORIQUE COMPLET DES OP√âRATIONS:"
    echo $FINAL_RESULT | jq '.data.operations[] | "   \(.created_at) | \(.type) | \(.status) | \(.amount) \(.currency) | PSP: \(.psp_reference // "N/A")"'
fi

# Compter les types d'op√©rations
CAPTURE_COUNT=$(echo $FINAL_RESULT | jq '.data.operations[] | select(.type == "capture")' | jq -s 'length')
REFUND_COUNT=$(echo $FINAL_RESULT | jq '.data.operations[] | select(.type == "refund")' | jq -s 'length')

echo ""
echo "üìä STATISTIQUES DES OP√âRATIONS:"
echo "   üí≥ Captures: $CAPTURE_COUNT"
echo "   üí∞ Refunds: $REFUND_COUNT"

# V√©rification des webhooks PSP
echo ""
echo "üî∏ V√©rification de l'historique des webhooks PSP..."
WEBHOOK_HISTORY=$(curl -s "$PSP_URL/api/webhook/history?limit=10")
WEBHOOK_COUNT=$(echo $WEBHOOK_HISTORY | jq '.total // 0')
echo "‚úÖ Webhooks envoy√©s: $WEBHOOK_COUNT"

if [ "$WEBHOOK_COUNT" -gt 0 ]; then
    echo "üî∏ Derniers webhooks:"
    echo $WEBHOOK_HISTORY | jq '.history[0:3] | .[] | "   üì® \(.operation_id) - \(.status) - \(.sent_at)"'
fi

echo ""
echo "üéØ ================================================================"
echo "üéØ TESTS WORKFLOW COMPLET TERMIN√âS AVEC SUCC√àS"
echo "üéØ ================================================================"
echo "‚úÖ ÔøΩ Workflow Synchrone: Transaction ‚Üí URL ‚Üí Confirmation ‚úì"
echo "‚úÖ ÔøΩ Workflow Asynchrone: PSP ‚Üí Op√©rations ‚Üí Webhooks ‚úì"
echo "‚úÖ Types d'op√©rations: Capture ($CAPTURE_COUNT) + Refund ($REFUND_COUNT) ‚úì"
echo "‚úÖ Notifications PSP: $WEBHOOK_COUNT webhooks envoy√©s ‚úì"
echo "üéØ ================================================================"
