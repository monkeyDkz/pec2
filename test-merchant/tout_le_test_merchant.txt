/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        },
        secondary: {
          50: '#fdf4ff',
          500: '#a855f7',
          600: '#9333ea',
          700: '#7c3aed',
        }
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 8080

CMD ["npm", "run", "serve"]
{
  "name": "payment-platform-test-merchant",
  "version": "1.0.0",
  "description": "Application marchande de test pour Payment Platform",
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "test": "vue-cli-service test:unit",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "vue": "^3.3.4",
    "vue-router": "^4.2.4",
    "pinia": "^2.1.6",
    "axios": "^1.5.0",
    "uuid": "^9.0.0",
    "moment": "^2.29.4",
    "@fortawesome/fontawesome-free": "^6.4.2",
    "tailwindcss": "^3.3.3",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.27"
  },
  "devDependencies": {
    "@vue/cli-service": "^5.0.8",
    "@vue/cli-plugin-router": "^5.0.8",
    "@vue/cli-plugin-eslint": "^5.0.8",
    "eslint": "^8.45.0",
    "eslint-plugin-vue": "^9.15.1"
  },
  "keywords": ["payment", "test", "merchant", "vue"],
  "author": "",
  "license": "ISC"
}
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
{
  "root": true,
  "env": {
    "node": true,
    "browser": true,
    "es2021": true
  },
  "extends": [
    "plugin:vue/vue3-essential",
    "eslint:recommended"
  ],
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module"
  },
  "rules": {
    "no-console": "off",
    "no-debugger": "off",
    "vue/multi-word-component-names": "off",
    "no-unused-vars": "warn"
  }
}
<template>
  <div id="app">
    <div class="min-h-screen bg-gray-50">
      <!-- Navigation -->
      <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
          <div class="flex justify-between h-16">
            <div class="flex items-center">
              <router-link to="/" class="flex items-center space-x-3">
                <div class="text-2xl">üõçÔ∏è</div>
                <span class="text-xl font-bold text-gray-900">Test Merchant</span>
              </router-link>
            </div>

            <div class="flex items-center space-x-6">
              <router-link to="/config" class="text-gray-700 hover:text-blue-600 flex items-center">
                <div class="text-lg mr-1">‚öôÔ∏è</div>
                Configuration
              </router-link>
              <router-link to="/shop" class="text-gray-700 hover:text-green-600 flex items-center">
                <div class="text-lg mr-1">ÔøΩÔ∏è</div>
                Boutique
              </router-link>
              <router-link to="/cart" class="text-gray-700 hover:text-green-600 flex items-center relative">
                <div class="text-lg mr-1">üõí</div>
                Panier
                <span v-if="cartStore.itemCount > 0" class="bg-red-500 text-white rounded-full px-2 py-1 text-xs ml-2">
                  {{ cartStore.itemCount }}
                </span>
              </router-link>
              <router-link to="/transactions" class="text-gray-700 hover:text-purple-600 flex items-center">
                <div class="text-lg mr-1">üí∞</div>
                Transactions
              </router-link>
              
              <!-- Cart Summary -->
              <div v-if="cartStore.itemCount > 0" class="text-sm text-gray-600">
                Total: {{ formatCurrency(cartStore.total) }}
              </div>
            </div>
          </div>
        </div>
      </nav>

      <!-- Contenu principal -->
      <main>
        <router-view />
      </main>

      <!-- Footer -->
      <footer class="bg-gray-800 text-white mt-auto">
        <div class="max-w-7xl mx-auto py-6 px-4 text-center">
          <p>&copy; 2025 Test Merchant Portal - Plateforme de test de paiement</p>
          <p class="text-sm text-gray-400 mt-2">
            üß™ Site de d√©monstration pour tester les workflows de paiement s√©curis√©s
          </p>
          <div class="flex justify-center space-x-4 mt-3 text-xs text-gray-500">
            <span>üìã API Backend</span>
            <span>üí≥ PSP Emulator</span>
            <span>üîî Webhooks</span>
            <span>üîÑ Remboursements</span>
          </div>
        </div>
      </footer>
    </div>
  </div>
</template>

<script>
import { useCartStore } from './stores/cart'

export default {
  name: 'App',
  setup() {
    const cartStore = useCartStore()

    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(amount)
    }

    // Charger le panier au d√©marrage
    cartStore.loadCart()

    return {
      cartStore,
      formatCurrency
    }
  }
}
</script>

<style>
#app {
  font-family: 'Inter', Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</style>
import { defineStore } from 'pinia'

export const useCartStore = defineStore('cart', {
  state: () => ({
    items: [],
    customerInfo: {
      email: '',
      firstName: '',
      lastName: '',
      billingAddress: {
        street: '',
        city: '',
        postalCode: '',
        country: 'FR'
      }
    }
  }),

  getters: {
    itemCount: (state) => state.items.reduce((sum, item) => sum + item.quantity, 0),
    total: (state) => state.items.reduce((sum, item) => sum + (item.price * item.quantity), 0),
    isEmpty: (state) => state.items.length === 0,
    
    // Calculs d√©taill√©s pour l'affichage
    subtotal: (state) => state.items.reduce((sum, item) => sum + (item.price * item.quantity), 0),
    shipping() {
      return this.subtotal >= 100 ? 0 : 9.99
    },
    taxes() {
      return this.subtotal * 0.2 // 20% TVA
    },
    finalTotal() {
      return this.subtotal + this.shipping + this.taxes
    }
  },

  actions: {
    addItem(product) {
      const existingItem = this.items.find(item => item.id === product.id)
      
      if (existingItem) {
        existingItem.quantity += (product.quantity || 1)
      } else {
        this.items.push({
          id: product.id,
          name: product.name,
          price: product.price,
          category: product.category,
          image: product.image,
          description: product.description,
          quantity: product.quantity || 1,
          addedAt: new Date().toISOString()
        })
      }
      
      this.saveToStorage()
    },

    removeItem(productId) {
      this.items = this.items.filter(item => item.id !== productId)
      this.saveToStorage()
    },

    updateQuantity(productId, quantity) {
      const item = this.items.find(item => item.id === productId)
      if (item) {
        if (quantity <= 0) {
          this.removeItem(productId)
        } else {
          item.quantity = quantity
          this.saveToStorage()
        }
      }
    },

    clearCart() {
      this.items = []
      this.saveToStorage()
    },

    updateCustomerInfo(info) {
      this.customerInfo = { ...this.customerInfo, ...info }
      this.saveToStorage()
    },

    generateOrderId() {
      return `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 8).toUpperCase()}`
    },

    getTransactionData(orderId = null) {
      return {
        orderId: orderId || this.generateOrderId(),
        amount: this.finalTotal,
        currency: 'EUR',
        description: this.getOrderDescription(),
        customerInfo: this.customerInfo,
        items: this.items.map(item => ({
          id: item.id,
          name: item.name,
          quantity: item.quantity,
          unitPrice: item.price,
          total: item.quantity * item.price
        })),
        metadata: {
          totalItems: this.itemCount,
          subtotal: this.subtotal,
          shipping: this.shipping,
          taxes: this.taxes,
          createdFrom: 'test-merchant-site',
          timestamp: new Date().toISOString()
        }
      }
    },

    getOrderDescription() {
      if (this.items.length === 1) {
        return `${this.items[0].name} x${this.items[0].quantity}`
      } else {
        return `Commande test marchand (${this.itemCount} articles)`
      }
    },

    loadCart() {
      try {
        const savedItems = localStorage.getItem('testMerchantCart')
        const savedCustomer = localStorage.getItem('testMerchantCustomer')
        
        if (savedItems) {
          this.items = JSON.parse(savedItems)
        }
        if (savedCustomer) {
          this.customerInfo = JSON.parse(savedCustomer)
        }
      } catch (error) {
        console.error('Erreur lors du chargement du panier:', error)
        this.items = []
      }
    },

    saveToStorage() {
      try {
        localStorage.setItem('testMerchantCart', JSON.stringify(this.items))
        localStorage.setItem('testMerchantCustomer', JSON.stringify(this.customerInfo))
      } catch (error) {
        console.error('Erreur lors de la sauvegarde du panier:', error)
      }
    }
  }
})
import { defineStore } from 'pinia'
import { authService } from '../services/api'

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: JSON.parse(localStorage.getItem('user')) || null,
    token: localStorage.getItem('auth_token') || null,
    isLoading: false,
    error: null
  }),

  getters: {
    isAuthenticated: (state) => !!state.token && !!state.user,
    isVerified: (state) => state.user?.is_verified || false
  },

  actions: {
    async register(userData) {
      this.isLoading = true
      this.error = null
      
      try {
        const response = await authService.register(userData)
        
        if (response.success) {
          // Ne pas connecter automatiquement, attendre la v√©rification email
          return response
        } else {
          throw new Error(response.message || 'Erreur lors de l\'inscription')
        }
      } catch (error) {
        this.error = error.response?.data?.message || error.message
        throw error
      } finally {
        this.isLoading = false
      }
    },

    async login(credentials) {
      this.isLoading = true
      this.error = null
      
      try {
        const response = await authService.login(credentials)
        
        if (response.success && response.data) {
          this.user = response.data.user
          this.token = response.data.token
          
          localStorage.setItem('user', JSON.stringify(response.data.user))
          localStorage.setItem('auth_token', response.data.token)
          
          return response
        } else {
          throw new Error(response.message || 'Erreur lors de la connexion')
        }
      } catch (error) {
        this.error = error.response?.data?.message || error.message
        throw error
      } finally {
        this.isLoading = false
      }
    },

    async verifyEmail(token) {
      this.isLoading = true
      this.error = null
      
      try {
        const response = await authService.verifyEmail(token)
        
        if (response.success && response.data) {
          this.user = response.data.user
          this.token = response.data.token
          
          localStorage.setItem('user', JSON.stringify(response.data.user))
          localStorage.setItem('auth_token', response.data.token)
          
          return response
        } else {
          throw new Error(response.message || 'Erreur lors de la v√©rification')
        }
      } catch (error) {
        this.error = error.response?.data?.message || error.message
        throw error
      } finally {
        this.isLoading = false
      }
    },

    async resendVerification(email) {
      this.isLoading = true
      this.error = null
      
      try {
        const response = await authService.resendVerification(email)
        return response
      } catch (error) {
        this.error = error.response?.data?.message || error.message
        throw error
      } finally {
        this.isLoading = false
      }
    },

    logout() {
      this.user = null
      this.token = null
      this.error = null
      
      localStorage.removeItem('user')
      localStorage.removeItem('auth_token')
      localStorage.removeItem('merchant_credentials')
    },

    clearError() {
      this.error = null
    }
  }
})
import { createPinia } from 'pinia'
import { defineStore } from 'pinia'

// Cart Store
export const useCartStore = defineStore('cart', {
  state: () => ({
    items: [],
    lastTransaction: null
  }),

  getters: {
    itemCount: (state) => state.items.reduce((total, item) => total + item.quantity, 0),
    total: (state) => state.items.reduce((total, item) => total + (item.price * item.quantity), 0)
  },

  actions: {
    addItem(product) {
      const existingItem = this.items.find(item => item.id === product.id)
      
      if (existingItem) {
        existingItem.quantity++
      } else {
        this.items.push({
          ...product,
          quantity: 1
        })
      }
      
      this.saveCart()
    },

    updateQuantity(itemId, quantity) {
      const item = this.items.find(item => item.id === itemId)
      if (item) {
        item.quantity = Math.max(0, quantity)
        if (item.quantity === 0) {
          this.removeItem(itemId)
        } else {
          this.saveCart()
        }
      }
    },

    removeItem(itemId) {
      const index = this.items.findIndex(item => item.id === itemId)
      if (index > -1) {
        this.items.splice(index, 1)
        this.saveCart()
      }
    },

    clearCart() {
      this.items = []
      this.saveCart()
    },

    saveCart() {
      localStorage.setItem('cart', JSON.stringify(this.items))
    },

    loadCart() {
      const saved = localStorage.getItem('cart')
      if (saved) {
        this.items = JSON.parse(saved)
      }
    },

    setLastTransaction(transaction) {
      this.lastTransaction = transaction
      localStorage.setItem('lastTransaction', JSON.stringify(transaction))
    }
  }
})

// Credentials Store
export const useCredentialsStore = defineStore('credentials', {
  state: () => ({
    merchantId: 'test-merchant-123',
    apiKey: 'test-api-key-123',
    backendUrl: 'http://localhost:3000',
    pspUrl: 'http://localhost:3002',
    webhookUrl: 'http://localhost:8081/webhook',
    returnUrl: 'http://localhost:8081/payment-return',
    cancelUrl: 'http://localhost:8081/payment-cancel',
    isConfigured: false
  }),

  actions: {
    updateCredentials(credentials) {
      Object.assign(this.$state, credentials)
      this.saveCredentials()
    },

    saveCredentials() {
      localStorage.setItem('merchantCredentials', JSON.stringify(this.$state))
    },

    loadCredentials() {
      const saved = localStorage.getItem('merchantCredentials')
      if (saved) {
        Object.assign(this.$state, JSON.parse(saved))
      }
    },

    testConnection() {
      // Cette fonction sera impl√©ment√©e pour tester la connexion
      return new Promise((resolve) => {
        setTimeout(() => {
          this.isConfigured = true
          resolve(true)
        }, 1000)
      })
    }
  }
})

// Transactions Store
export const useTransactionsStore = defineStore('transactions', {
  state: () => ({
    transactions: [],
    isLoading: false
  }),

  getters: {
    successfulTransactions: (state) => state.transactions.filter(t => t.status === 'captured' || t.status === 'authorized'),
    failedTransactions: (state) => state.transactions.filter(t => t.status === 'failed'),
    totalAmount: (state) => state.transactions
      .filter(t => t.status === 'captured')
      .reduce((sum, t) => sum + t.amount, 0)
  },

  actions: {
    addTransaction(transaction) {
      this.transactions.unshift({
        ...transaction,
        timestamp: new Date().toISOString(),
        id: transaction.id || `TXN_${Date.now()}`
      })
      this.saveTransactions()
    },

    updateTransaction(transactionId, updates) {
      const transaction = this.transactions.find(t => t.id === transactionId)
      if (transaction) {
        Object.assign(transaction, updates)
        this.saveTransactions()
      }
    },

    clearTransactions() {
      this.transactions = []
      this.saveTransactions()
    },

    saveTransactions() {
      localStorage.setItem('transactions', JSON.stringify(this.transactions))
    },

    loadTransactions() {
      const saved = localStorage.getItem('transactions')
      if (saved) {
        this.transactions = JSON.parse(saved)
      }
    }
  }
})

// Create Pinia instance
export const pinia = createPinia()
// Ce store est simplifi√© pour le test merchant
// Pas besoin d'authentification utilisateur complexe

import { defineStore } from 'pinia'

export const useAuthStore = defineStore('auth', {
  state: () => ({
    // Store minimal - le test merchant n'a pas besoin d'auth utilisateur
  }),
  
  getters: {
    isAuthenticated: () => true // Toujours "connect√©" pour simplifier
  },
  
  actions: {
    // Pas d'actions d'auth n√©cessaires
  }
})
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import router from './router'
import App from './App.vue'

// CSS
import '@fortawesome/fontawesome-free/css/all.css'
import './assets/css/main.css'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')
<template>
  <div class="cart">
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold text-gray-800">üõí Panier</h2>
      <span class="bg-blue-600 text-white text-sm px-2 py-1 rounded-full">
        {{ totalItems }}
      </span>
    </div>

    <!-- Empty Cart -->
    <div v-if="items.length === 0" class="text-center py-8">
      <div class="text-4xl mb-3">üõí</div>
      <p class="text-gray-500">Votre panier est vide</p>
    </div>

    <!-- Cart Items -->
    <div v-else class="space-y-4">
      <!-- Items List -->
      <div class="max-h-96 overflow-y-auto space-y-3">
        <div
          v-for="item in items"
          :key="item.id"
          class="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
        >
          <div class="flex items-center flex-1">
            <div class="text-2xl mr-3">{{ item.image }}</div>
            <div class="flex-1 min-w-0">
              <h4 class="text-sm font-medium text-gray-900 truncate">{{ item.name }}</h4>
              <p class="text-xs text-gray-500">{{ formatCurrency(item.price) }} √ó {{ item.quantity }}</p>
            </div>
          </div>

          <div class="flex items-center space-x-2">
            <!-- Quantity Controls -->
            <div class="flex items-center border border-gray-300 rounded">
              <button
                @click="updateQuantity(item.id, item.quantity - 1)"
                :disabled="item.quantity <= 1"
                class="px-2 py-1 text-xs text-gray-600 hover:text-gray-800 disabled:opacity-50"
              >
                -
              </button>
              <span class="px-2 py-1 text-xs">{{ item.quantity }}</span>
              <button
                @click="updateQuantity(item.id, item.quantity + 1)"
                :disabled="item.quantity >= 99"
                class="px-2 py-1 text-xs text-gray-600 hover:text-gray-800 disabled:opacity-50"
              >
                +
              </button>
            </div>

            <!-- Remove Button -->
            <button
              @click="removeItem(item.id)"
              class="text-red-500 hover:text-red-700 text-sm"
              title="Supprimer"
            >
              üóëÔ∏è
            </button>
          </div>
        </div>
      </div>

      <!-- Cart Summary -->
      <div class="border-t pt-4">
        <!-- Subtotal -->
        <div class="flex justify-between text-sm text-gray-600 mb-2">
          <span>Sous-total ({{ totalItems }} articles)</span>
          <span>{{ formatCurrency(subtotal) }}</span>
        </div>

        <!-- Shipping -->
        <div class="flex justify-between text-sm text-gray-600 mb-2">
          <span>Livraison</span>
          <span>{{ formatCurrency(shipping) }}</span>
        </div>

        <!-- Taxes -->
        <div class="flex justify-between text-sm text-gray-600 mb-3">
          <span>TVA (20%)</span>
          <span>{{ formatCurrency(taxes) }}</span>
        </div>

        <!-- Total -->
        <div class="border-t pt-3">
          <div class="flex justify-between text-lg font-semibold text-gray-900">
            <span>Total</span>
            <span>{{ formatCurrency(total) }}</span>
          </div>
        </div>
      </div>

      <!-- Cart Actions -->
      <div class="space-y-2">
        <button
          @click="checkout"
          :disabled="items.length === 0"
          class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
        >
          üí≥ Proc√©der au paiement
        </button>

        <button
          @click="clearCart"
          :disabled="items.length === 0"
          class="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm"
        >
          üóëÔ∏è Vider le panier
        </button>
      </div>

      <!-- Promo Code -->
      <div class="border-t pt-4">
        <div class="flex space-x-2">
          <input
            v-model="promoCode"
            type="text"
            placeholder="Code promo"
            class="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            @click="applyPromoCode"
            :disabled="!promoCode.trim()"
            class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 disabled:opacity-50 transition-colors text-sm"
          >
            Appliquer
          </button>
        </div>
        
        <div v-if="appliedPromo" class="mt-2 text-sm text-green-600">
          ‚úÖ Code "{{ appliedPromo.code }}" appliqu√©: -{{ formatCurrency(appliedPromo.discount) }}
        </div>
      </div>

      <!-- Cart Stats -->
      <div class="border-t pt-4">
        <div class="grid grid-cols-2 gap-4 text-center">
          <div>
            <div class="text-2xl font-bold text-blue-600">{{ totalItems }}</div>
            <div class="text-xs text-gray-500">Articles</div>
          </div>
          <div>
            <div class="text-2xl font-bold text-green-600">{{ formatCurrency(savings) }}</div>
            <div class="text-xs text-gray-500">√âconomies</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed } from 'vue'

export default {
  name: 'Cart',
  props: {
    items: {
      type: Array,
      default: () => []
    },
    total: {
      type: Number,
      default: 0
    }
  },
  emits: ['update-quantity', 'remove-item', 'clear-cart', 'checkout'],
  setup(props, { emit }) {
    const promoCode = ref('')
    const appliedPromo = ref(null)

    // Computed properties
    const totalItems = computed(() => {
      return props.items.reduce((sum, item) => sum + item.quantity, 0)
    })

    const subtotal = computed(() => {
      return props.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    })

    const shipping = computed(() => {
      // Free shipping over 100‚Ç¨
      return subtotal.value >= 100 ? 0 : 9.99
    })

    const taxes = computed(() => {
      return subtotal.value * 0.2 // 20% VAT
    })

    const promoDiscount = computed(() => {
      return appliedPromo.value ? appliedPromo.value.discount : 0
    })

    const finalTotal = computed(() => {
      return Math.max(0, subtotal.value + shipping.value + taxes.value - promoDiscount.value)
    })

    const savings = computed(() => {
      const regularShipping = 9.99
      const shippingSavings = subtotal.value >= 100 ? regularShipping : 0
      return shippingSavings + promoDiscount.value
    })

    // Helper functions
    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(amount)
    }

    // Actions
    const updateQuantity = (itemId, newQuantity) => {
      if (newQuantity <= 0) {
        removeItem(itemId)
      } else {
        emit('update-quantity', itemId, newQuantity)
      }
    }

    const removeItem = (itemId) => {
      emit('remove-item', itemId)
    }

    const clearCart = () => {
      if (confirm('√ätes-vous s√ªr de vouloir vider le panier ?')) {
        emit('clear-cart')
        appliedPromo.value = null
        promoCode.value = ''
      }
    }

    const checkout = () => {
      emit('checkout')
    }

    const applyPromoCode = () => {
      const code = promoCode.value.trim().toUpperCase()
      
      // Sample promo codes
      const promoCodes = {
        'WELCOME10': { code: 'WELCOME10', discount: 10, type: 'fixed' },
        'SAVE5': { code: 'SAVE5', discount: 5, type: 'fixed' },
        'PERCENT10': { code: 'PERCENT10', discount: subtotal.value * 0.1, type: 'percentage' },
        'FREESHIP': { code: 'FREESHIP', discount: shipping.value, type: 'shipping' }
      }

      if (promoCodes[code]) {
        appliedPromo.value = promoCodes[code]
        promoCode.value = ''
      } else {
        alert('Code promo invalide')
      }
    }

    return {
      promoCode,
      appliedPromo,
      totalItems,
      subtotal,
      shipping,
      taxes,
      savings,
      finalTotal,
      formatCurrency,
      updateQuantity,
      removeItem,
      clearCart,
      checkout,
      applyPromoCode
    }
  }
}
</script>

<style scoped>
/* Custom scrollbar for items list */
.overflow-y-auto::-webkit-scrollbar {
  width: 4px;
}

.overflow-y-auto::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 2px;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 2px;
}

.overflow-y-auto::-webkit-scrollbar-thumb:hover {
  background: #555;
}

/* Animations */
.item-enter-active,
.item-leave-active {
  transition: all 0.3s ease;
}

.item-enter-from,
.item-leave-to {
  opacity: 0;
  transform: translateX(30px);
}

/* Button hover effects */
button {
  transition: all 0.2s ease;
}

button:hover:not(:disabled) {
  transform: translateY(-1px);
}

button:active:not(:disabled) {
  transform: translateY(0);
}
</style>
<template>
  <div class="product-card bg-white border-2 border-gray-200 rounded-lg p-4 hover:border-blue-500 transition-colors">
    <div class="text-center">
      <!-- Product Image/Icon -->
      <div class="text-6xl mb-3">{{ product.image }}</div>
      
      <!-- Product Info -->
      <h3 class="text-lg font-semibold text-gray-800 mb-1">{{ product.name }}</h3>
      <p class="text-sm text-gray-600 mb-2">{{ product.category }}</p>
      <p class="text-xs text-gray-500 mb-4">{{ product.description }}</p>
      
      <!-- Price -->
      <div class="text-2xl font-bold text-blue-600 mb-4">
        {{ formatCurrency(product.price) }}
      </div>
      
      <!-- Quantity Selector -->
      <div class="flex items-center justify-center mb-4">
        <label class="text-sm text-gray-700 mr-2">Quantit√©:</label>
        <div class="flex items-center border border-gray-300 rounded-md">
          <button
            @click="decrementQuantity"
            :disabled="quantity <= 1"
            class="px-3 py-1 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            -
          </button>
          <input
            v-model.number="quantity"
            type="number"
            min="1"
            max="99"
            class="w-16 px-2 py-1 text-center border-0 focus:outline-none"
          />
          <button
            @click="incrementQuantity"
            :disabled="quantity >= 99"
            class="px-3 py-1 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            +
          </button>
        </div>
      </div>
      
      <!-- Add to Cart Button -->
      <button
        @click="addToCart"
        class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
      >
        üõí Ajouter au panier
      </button>
    </div>
  </div>
</template>

<script>
import { ref } from 'vue'

export default {
  name: 'ProductCard',
  props: {
    product: {
      type: Object,
      required: true,
      validator: (product) => {
        return product.id && product.name && typeof product.price === 'number'
      }
    }
  },
  emits: ['add-to-cart'],
  setup(props, { emit }) {
    const quantity = ref(1)

    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(amount)
    }

    const incrementQuantity = () => {
      if (quantity.value < 99) {
        quantity.value++
      }
    }

    const decrementQuantity = () => {
      if (quantity.value > 1) {
        quantity.value--
      }
    }

    const addToCart = () => {
      emit('add-to-cart', {
        ...props.product,
        quantity: quantity.value
      })
      
      // Reset quantity to 1 after adding to cart
      quantity.value = 1
    }

    return {
      quantity,
      formatCurrency,
      incrementQuantity,
      decrementQuantity,
      addToCart
    }
  }
}
</script>

<style scoped>
/* Animations */
.product-card {
  transition: all 0.3s ease;
}

.product-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* Input number styling */
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="number"] {
  -moz-appearance: textfield;
}
</style>
<template>
  <div class="cart-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-800 mb-2">üõí Mon Panier</h1>
              <p class="text-gray-600">{{ cartItems.length }} article(s) dans votre panier</p>
            </div>
            <router-link 
              to="/shop" 
              class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              ‚Üê Continuer mes achats
            </router-link>
          </div>
        </div>

        <div v-if="cartItems.length === 0" class="bg-white rounded-lg shadow-lg p-12 text-center">
          <div class="text-6xl mb-4">üõí</div>
          <h2 class="text-xl font-semibold text-gray-800 mb-2">Votre panier est vide</h2>
          <p class="text-gray-600 mb-6">D√©couvrez nos produits et ajoutez-les √† votre panier</p>
          <router-link 
            to="/shop" 
            class="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors"
          >
            Voir nos produits
          </router-link>
        </div>

        <div v-else class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Cart Items -->
          <div class="lg:col-span-2">
            <div class="bg-white rounded-lg shadow-lg p-6">
              <h2 class="text-xl font-semibold text-gray-800 mb-4">Articles</h2>
              
              <div class="space-y-4">
                <div 
                  v-for="item in cartItems" 
                  :key="item.id"
                  class="flex items-center gap-4 p-4 border border-gray-200 rounded-lg"
                >
                  <div class="text-4xl">{{ item.image || 'üì¶' }}</div>
                  
                  <div class="flex-1">
                    <h3 class="font-semibold text-gray-800">{{ item.name }}</h3>
                    <p class="text-sm text-gray-600">{{ item.category }}</p>
                    <p class="text-lg font-bold text-blue-600">{{ item.price.toFixed(2) }}‚Ç¨</p>
                  </div>
                  
                  <div class="flex items-center gap-2">
                    <button 
                      @click="updateQuantity(item.id, item.quantity - 1)"
                      class="w-8 h-8 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300 transition-colors"
                      :disabled="item.quantity <= 1"
                    >
                      -
                    </button>
                    <span class="w-12 text-center font-semibold">{{ item.quantity }}</span>
                    <button 
                      @click="updateQuantity(item.id, item.quantity + 1)"
                      class="w-8 h-8 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300 transition-colors"
                    >
                      +
                    </button>
                  </div>
                  
                  <div class="text-right">
                    <p class="font-bold text-gray-800">{{ (item.price * item.quantity).toFixed(2) }}‚Ç¨</p>
                    <button 
                      @click="removeItem(item.id)"
                      class="text-red-600 hover:text-red-800 text-sm mt-1"
                    >
                      Supprimer
                    </button>
                  </div>
                </div>
              </div>

              <div class="mt-6 pt-4 border-t">
                <button 
                  @click="clearCart"
                  class="text-red-600 hover:text-red-800 text-sm"
                >
                  Vider le panier
                </button>
              </div>
            </div>
          </div>

          <!-- Order Summary & Payment -->
          <div class="lg:col-span-1">
            <div class="bg-white rounded-lg shadow-lg p-6 sticky top-4">
              <h2 class="text-xl font-semibold text-gray-800 mb-4">R√©sum√© de commande</h2>
              
              <div class="space-y-2 mb-4">
                <div class="flex justify-between">
                  <span>Sous-total</span>
                  <span>{{ cartTotal.toFixed(2) }}‚Ç¨</span>
                </div>
                <div class="flex justify-between">
                  <span>Livraison</span>
                  <span>Gratuite</span>
                </div>
                <div class="flex justify-between text-lg font-bold border-t pt-2">
                  <span>Total</span>
                  <span>{{ cartTotal.toFixed(2) }}‚Ç¨</span>
                </div>
              </div>

              <!-- Payment Options -->
              <div class="space-y-3">
                <h3 class="font-semibold text-gray-800">Choisir le mode de paiement :</h3>
                
                <button
                  @click="initiatePayment('standard')"
                  :disabled="processingPayment"
                  class="w-full bg-green-600 text-white py-3 px-4 rounded-md hover:bg-green-700 disabled:opacity-50 transition-colors flex items-center justify-center gap-2"
                >
                  <span>üí≥</span>
                  {{ processingPayment ? 'Traitement...' : 'Payer Maintenant' }}
                </button>
                
                <button
                  @click="initiatePayment('preauth')"
                  :disabled="processingPayment"
                  class="w-full bg-yellow-600 text-white py-2 px-4 rounded-md hover:bg-yellow-700 disabled:opacity-50 transition-colors flex items-center justify-center gap-2"
                >
                  <span>üîí</span>
                  Pr√©-autorisation
                </button>
                
                <button
                  @click="initiatePayment('fail')"
                  :disabled="processingPayment"
                  class="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 disabled:opacity-50 transition-colors flex items-center justify-center gap-2"
                >
                  <span>‚ùå</span>
                  Tester un √©chec
                </button>
              </div>

              <div class="mt-4 text-xs text-gray-500">
                <p>üîí Paiement s√©curis√©</p>
                <p>‚úì Donn√©es chiffr√©es</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Payment Result Modal -->
        <div v-if="paymentResult" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div class="text-center">
              <div class="text-6xl mb-4">
                {{ paymentResult.success ? '‚úÖ' : '‚ùå' }}
              </div>
              <h3 class="text-xl font-semibold text-gray-800 mb-2">
                {{ paymentResult.success ? 'Paiement R√©ussi !' : 'Paiement √âchou√©' }}
              </h3>
              <p class="text-gray-600 mb-4">{{ paymentResult.message }}</p>
              
              <div v-if="paymentResult.details" class="bg-gray-50 p-3 rounded text-left text-sm mb-4">
                <p><strong>ID Transaction:</strong> {{ paymentResult.details.transactionId }}</p>
                <p><strong>Montant:</strong> {{ paymentResult.details.amount?.toFixed(2) }}‚Ç¨</p>
                <p><strong>Statut:</strong> {{ paymentResult.details.status }}</p>
              </div>
              
              <div class="flex gap-2">
                <button
                  @click="closePaymentModal"
                  class="flex-1 bg-gray-600 text-white py-2 px-4 rounded-md hover:bg-gray-700"
                >
                  Fermer
                </button>
                <button
                  v-if="paymentResult.success"
                  @click="goToTransactions"
                  class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700"
                >
                  Voir les transactions
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useRouter } from 'vue-router'
import { useCartStore } from '../stores/index.js'
import { useApi } from '../services/api.js'

const router = useRouter()
const cartStore = useCartStore()
const api = useApi()

const processingPayment = ref(false)
const paymentResult = ref(null)

// Computed properties
const cartItems = computed(() => cartStore.items)
const cartTotal = computed(() => cartStore.total)

// Cart management
const updateQuantity = (itemId, newQuantity) => {
  if (newQuantity <= 0) {
    removeItem(itemId)
  } else {
    cartStore.updateQuantity(itemId, newQuantity)
  }
}

const removeItem = (itemId) => {
  cartStore.removeItem(itemId)
}

const clearCart = () => {
  if (confirm('√ätes-vous s√ªr de vouloir vider votre panier ?')) {
    cartStore.clearCart()
  }
}

// Payment processing
const initiatePayment = async (type) => {
  if (cartItems.value.length === 0) return

  processingPayment.value = true

  try {
    // Pr√©parer les donn√©es de la commande
    const orderData = {
      amount: cartTotal.value,
      currency: 'EUR',
      description: `Commande de ${cartItems.value.length} article(s)`,
      items: cartItems.value.map(item => ({
        name: item.name,
        quantity: item.quantity,
        price: item.price,
        total: item.quantity * item.price
      })),
      metadata: {
        orderType: type,
        timestamp: new Date().toISOString()
      }
    }

    // Simuler diff√©rents types de paiement
    let paymentResponse
    
    if (type === 'fail') {
      // Simuler un √©chec
      paymentResponse = {
        success: false,
        message: 'Paiement refus√© par la banque',
        details: {
          transactionId: `TXN_FAIL_${Date.now()}`,
          amount: cartTotal.value,
          status: 'failed',
          error: 'Insufficient funds'
        }
      }
    } else {
      // Simuler un succ√®s
      const transactionId = `TXN_${type.toUpperCase()}_${Date.now()}`
      
      paymentResponse = {
        success: true,
        message: type === 'preauth' ? 'Pr√©-autorisation effectu√©e avec succ√®s' : 'Paiement trait√© avec succ√®s',
        details: {
          transactionId,
          amount: cartTotal.value,
          status: type === 'preauth' ? 'authorized' : 'captured',
          captureAmount: type === 'preauth' ? 0 : cartTotal.value
        }
      }

      // Appeler l'API r√©elle si configur√©e
      try {
        const response = await api.createTransaction(orderData)
        if (response.data) {
          paymentResponse.details.transactionId = response.data.id || response.data.transactionId
          paymentResponse.details.status = response.data.status
        }
      } catch (apiError) {
        console.warn('API non disponible, utilisation des donn√©es simul√©es:', apiError)
      }
    }

    paymentResult.value = paymentResponse

    // Si succ√®s, vider le panier apr√®s un d√©lai
    if (paymentResponse.success) {
      setTimeout(() => {
        cartStore.clearCart()
      }, 3000)
    }

  } catch (error) {
    paymentResult.value = {
      success: false,
      message: 'Erreur lors du traitement du paiement',
      details: {
        error: error.message
      }
    }
  } finally {
    processingPayment.value = false
  }
}

const closePaymentModal = () => {
  paymentResult.value = null
}

const goToTransactions = () => {
  closePaymentModal()
  router.push('/transactions')
}
</script>
<template>
  <div class="payment-cancel-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-2xl mx-auto">
        <!-- Cancel Result -->
        <div class="bg-white rounded-lg shadow-lg p-8 text-center">
          <div class="text-6xl mb-6">‚ùå</div>
          <h1 class="text-3xl font-bold text-red-800 mb-4">Paiement Annul√©</h1>
          <p class="text-gray-600 mb-6">Votre transaction a √©t√© annul√©e. Aucun montant n'a √©t√© d√©bit√©.</p>

          <!-- Cancel Reason -->
          <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
            <h2 class="text-lg font-semibold text-red-800 mb-4">Raison de l'Annulation</h2>
            <div class="text-left text-red-700">
              <p v-if="cancelReason">{{ cancelReason }}</p>
              <p v-else>Le paiement a √©t√© annul√© par l'utilisateur ou a expir√©.</p>
            </div>
          </div>

          <!-- Cart Recovery -->
          <div v-if="cartItems && cartItems.length > 0" class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
            <h3 class="font-semibold text-yellow-800 mb-3">üõí Votre Panier</h3>
            <p class="text-yellow-700 mb-3">Vos articles sont toujours dans votre panier :</p>
            <div class="space-y-2 text-left">
              <div v-for="item in cartItems" :key="item.id" class="flex justify-between text-sm">
                <span>{{ item.name }} x{{ item.quantity }}</span>
                <span>{{ formatCurrency(item.price * item.quantity) }}</span>
              </div>
              <div class="border-t pt-2 font-bold flex justify-between">
                <span>Total:</span>
                <span>{{ formatCurrency(cartTotal) }}</span>
              </div>
            </div>
          </div>

          <!-- What Happened -->
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
            <h3 class="font-semibold text-blue-800 mb-3">‚ÑπÔ∏è Que s'est-il pass√© ?</h3>
            <div class="text-left text-blue-700 space-y-2">
              <p>‚Ä¢ Vous avez annul√© le paiement ou ferm√© la page</p>
              <p>‚Ä¢ Le d√©lai de paiement a expir√©</p>
              <p>‚Ä¢ Une erreur technique s'est produite</p>
              <p>‚Ä¢ Aucun montant n'a √©t√© d√©bit√© de votre compte</p>
            </div>
          </div>

          <!-- Actions -->
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <router-link
              to="/cart"
              class="bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 transition-colors"
            >
              üõí Retourner au Panier
            </router-link>
            <router-link
              to="/shop"
              class="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors"
            >
              üõçÔ∏è Continuer mes Achats
            </router-link>
            <router-link
              to="/config"
              class="bg-orange-600 text-white px-6 py-3 rounded-md hover:bg-orange-700 transition-colors"
            >
              ‚öôÔ∏è Configuration
            </router-link>
            <router-link
              to="/"
              class="bg-gray-600 text-white px-6 py-3 rounded-md hover:bg-gray-700 transition-colors"
            >
              üè† Retour Accueil
            </router-link>
          </div>

          <!-- Help Section -->
          <div class="mt-8 p-4 bg-gray-100 rounded-lg">
            <p class="text-sm text-gray-600">
              <strong>Besoin d'aide ?</strong><br>
              Si vous rencontrez des difficult√©s avec le paiement :<br>
              ‚Ä¢ V√©rifiez votre configuration de paiement<br>
              ‚Ä¢ Contactez le support: <a href="mailto:support@example.com" class="text-blue-600">support@example.com</a><br>
              ‚Ä¢ Session ID: <span class="font-mono">{{ sessionId }}</span>
            </p>
          </div>

          <!-- Debug Info (Development) -->
          <div v-if="isDevelopment" class="mt-6 p-4 bg-gray-800 text-white rounded-lg text-left">
            <h4 class="font-semibold mb-2">üîß Debug Info (Development)</h4>
            <div class="text-xs font-mono space-y-1">
              <p>URL Params: {{ JSON.stringify($route.query) }}</p>
              <p>Cancel Reason: {{ cancelReason || 'N/A' }}</p>
              <p>Session ID: {{ sessionId }}</p>
              <p>Timestamp: {{ new Date().toISOString() }}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRoute } from 'vue-router'
import { useCartStore } from '../stores/index.js'

const route = useRoute()
const cartStore = useCartStore()

const cancelReason = ref('')
const sessionId = ref('')
const isDevelopment = ref(process.env.NODE_ENV === 'development')

const cartItems = computed(() => cartStore.items)
const cartTotal = computed(() => cartStore.total)

// Helper functions
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'EUR'
  }).format(amount)
}

onMounted(() => {
  // Extract cancel information from URL params
  cancelReason.value = route.query.reason || route.query.error || ''
  sessionId.value = route.query.session_id || route.query.payment_id || 'SESS_' + Date.now()
  
  // Map common cancel reasons
  const reasonMap = {
    'user_cancelled': 'Paiement annul√© par l\'utilisateur',
    'expired': 'Session de paiement expir√©e',
    'timeout': 'D√©lai de paiement d√©pass√©',
    'technical_error': 'Erreur technique lors du paiement',
    'insufficient_funds': 'Fonds insuffisants',
    'card_declined': 'Carte refus√©e par la banque',
    'invalid_card': 'Donn√©es de carte invalides'
  }
  
  if (cancelReason.value && reasonMap[cancelReason.value]) {
    cancelReason.value = reasonMap[cancelReason.value]
  }
  
  // Log cancellation for analytics (in real app)
  console.log('Payment cancelled:', {
    reason: cancelReason.value,
    sessionId: sessionId.value,
    cartValue: cartTotal.value,
    timestamp: new Date().toISOString()
  })
})
</script>
<template>
  <div class="credentials-config">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Configuration des Credentials</h1>
          <p class="text-gray-600">Configurez vos param√®tres API pour tester la plateforme de paiement</p>
        </div>

        <!-- Status Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6" v-if="statusMessage">
          <div :class="statusClass" class="p-4 rounded-lg">
            <div class="flex items-center">
              <div :class="statusIcon" class="w-5 h-5 mr-3"></div>
              <p class="font-medium">{{ statusMessage }}</p>
            </div>
          </div>
        </div>

        <!-- Configuration Form -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- API Configuration -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">üîß Configuration API</h2>
            <form @submit.prevent="saveCredentials" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Backend URL
                </label>
                <input
                  v-model="credentials.backendUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="http://localhost:3000"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  PSP URL
                </label>
                <input
                  v-model="credentials.pspUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="http://localhost:4000"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Merchant ID
                </label>
                <input
                  v-model="credentials.merchantId"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="merchant-123"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  API Key
                </label>
                <div class="relative">
                  <input
                    v-model="credentials.apiKey"
                    :type="showApiKey ? 'text' : 'password'"
                    class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="your-api-key"
                    required
                  />
                  <button
                    type="button"
                    @click="showApiKey = !showApiKey"
                    class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                  >
                    <svg v-if="showApiKey" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L8.464 8.464M9.878 9.878l-0.415-0.415M12 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"></path>
                    </svg>
                    <svg v-else class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <div class="flex gap-3">
                <button
                  type="submit"
                  :disabled="loading"
                  class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {{ loading ? 'Sauvegarde...' : 'Sauvegarder' }}
                </button>
                <button
                  type="button"
                  @click="testConnection"
                  :disabled="loading"
                  class="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {{ loading ? 'Test...' : 'Tester la connexion' }}
                </button>
              </div>
            </form>
          </div>

          <!-- Connection Status -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">üîå √âtat des Connexions</h2>
            
            <div class="space-y-4">
              <!-- Backend Status -->
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center">
                  <div :class="connectionStatus.backend ? 'bg-green-500' : 'bg-red-500'" class="w-3 h-3 rounded-full mr-3"></div>
                  <span class="font-medium">Backend API</span>
                </div>
                <span :class="connectionStatus.backend ? 'text-green-600' : 'text-red-600'" class="text-sm font-medium">
                  {{ connectionStatus.backend ? 'Connect√©' : 'D√©connect√©' }}
                </span>
              </div>

              <!-- PSP Status -->
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center">
                  <div :class="connectionStatus.psp ? 'bg-green-500' : 'bg-red-500'" class="w-3 h-3 rounded-full mr-3"></div>
                  <span class="font-medium">PSP Emulator</span>
                </div>
                <span :class="connectionStatus.psp ? 'text-green-600' : 'text-red-600'" class="text-sm font-medium">
                  {{ connectionStatus.psp ? 'Connect√©' : 'D√©connect√©' }}
                </span>
              </div>

              <!-- Auth Status -->
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center">
                  <div :class="connectionStatus.auth ? 'bg-green-500' : 'bg-red-500'" class="w-3 h-3 rounded-full mr-3"></div>
                  <span class="font-medium">Authentification</span>
                </div>
                <span :class="connectionStatus.auth ? 'text-green-600' : 'text-red-600'" class="text-sm font-medium">
                  {{ connectionStatus.auth ? 'Authentifi√©' : 'Non authentifi√©' }}
                </span>
              </div>
            </div>

            <!-- Last Test Results -->
            <div v-if="lastTestResults" class="mt-6">
              <h3 class="text-lg font-medium text-gray-800 mb-3">Derniers Tests</h3>
              <div class="bg-gray-50 rounded-lg p-3">
                <div class="text-sm text-gray-600 space-y-1">
                  <div>‚è±Ô∏è {{ new Date(lastTestResults.timestamp).toLocaleString() }}</div>
                  <div>üèÅ Backend: {{ lastTestResults.backend }}ms</div>
                  <div>üí≥ PSP: {{ lastTestResults.psp }}ms</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Presets -->
        <div class="bg-white rounded-lg shadow-lg p-6 mt-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">‚ö° Configurations Pr√©d√©finies</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              @click="loadPreset('development')"
              class="p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors"
            >
              <div class="text-center">
                <div class="text-2xl mb-2">üîß</div>
                <div class="font-medium text-gray-800">D√©veloppement</div>
                <div class="text-sm text-gray-600">Ports locaux standard</div>
              </div>
            </button>

            <button
              @click="loadPreset('docker')"
              class="p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors"
            >
              <div class="text-center">
                <div class="text-2xl mb-2">üê≥</div>
                <div class="font-medium text-gray-800">Docker</div>
                <div class="text-sm text-gray-600">Services containeris√©s</div>
              </div>
            </button>

            <button
              @click="loadPreset('production')"
              class="p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors"
            >
              <div class="text-center">
                <div class="text-2xl mb-2">üöÄ</div>
                <div class="font-medium text-gray-800">Production</div>
                <div class="text-sm text-gray-600">Environnement de prod</div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, computed, onMounted } from 'vue'
import { useApi } from '@/services/api'

export default {
  name: 'CredentialsConfig',
  setup() {
    const api = useApi()
    const loading = ref(false)
    const showApiKey = ref(false)
    const statusMessage = ref('')
    const statusType = ref('')

    const credentials = reactive({
      backendUrl: 'http://backend:3000',
      pspUrl: 'http://psp-emulator:4000',
      merchantId: 'test-merchant-123',
      apiKey: 'test-api-key-123'
    })

    const connectionStatus = reactive({
      backend: false,
      psp: false,
      auth: false
    })

    const lastTestResults = ref(null)

    const statusClass = computed(() => {
      return {
        'bg-green-100 border border-green-400 text-green-700': statusType.value === 'success',
        'bg-red-100 border border-red-400 text-red-700': statusType.value === 'error',
        'bg-blue-100 border border-blue-400 text-blue-700': statusType.value === 'info',
        'bg-yellow-100 border border-yellow-400 text-yellow-700': statusType.value === 'warning'
      }
    })

    const statusIcon = computed(() => {
      const icons = {
        success: 'text-green-500',
        error: 'text-red-500',
        info: 'text-blue-500',
        warning: 'text-yellow-500'
      }
      return icons[statusType.value] || 'text-gray-500'
    })

    const showStatus = (message, type = 'info') => {
      statusMessage.value = message
      statusType.value = type
      setTimeout(() => {
        statusMessage.value = ''
        statusType.value = ''
      }, 5000)
    }

    const saveCredentials = async () => {
      loading.value = true
      try {
        // Sauvegarder en localStorage
        localStorage.setItem('testMerchantCredentials', JSON.stringify(credentials))
        
        // Mettre √† jour l'API service
        api.setCredentials(credentials)
        
        showStatus('‚úÖ Credentials sauvegard√©s avec succ√®s !', 'success')
      } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error)
        showStatus('‚ùå Erreur lors de la sauvegarde des credentials', 'error')
      } finally {
        loading.value = false
      }
    }

    const testConnection = async () => {
      loading.value = true
      
      try {
        const results = {
          timestamp: new Date().toISOString(),
          backend: 0,
          psp: 0
        }

        // Test Backend
        try {
          const backendStart = Date.now()
          const response = await fetch(`${credentials.backendUrl}/api/health`)
          results.backend = Date.now() - backendStart
          connectionStatus.backend = response.ok
        } catch (error) {
          connectionStatus.backend = false
          results.backend = -1
        }

        // Test PSP
        try {
          const pspStart = Date.now()
          const response = await fetch(`${credentials.pspUrl}/health`)
          results.psp = Date.now() - pspStart
          connectionStatus.psp = response.ok
        } catch (error) {
          connectionStatus.psp = false
          results.psp = -1
        }

        // Test Auth (si token disponible)
        const token = localStorage.getItem('authToken')
        if (token) {
          try {
            const response = await fetch(`${credentials.backendUrl}/api/auth/profile`, {
              headers: { Authorization: `Bearer ${token}` }
            })
            connectionStatus.auth = response.ok
          } catch (error) {
            connectionStatus.auth = false
          }
        } else {
          connectionStatus.auth = false
        }

        lastTestResults.value = results

        const allConnected = connectionStatus.backend && connectionStatus.psp
        if (allConnected) {
          showStatus('‚úÖ Toutes les connexions sont op√©rationnelles !', 'success')
        } else {
          showStatus('‚ö†Ô∏è Certains services ne r√©pondent pas', 'warning')
        }

      } catch (error) {
        console.error('Erreur lors du test de connexion:', error)
        showStatus('‚ùå Erreur lors du test de connexion', 'error')
      } finally {
        loading.value = false
      }
    }

    const loadPreset = (preset) => {
      const presets = {
        development: {
          backendUrl: 'http://localhost:3000',
          pspUrl: 'http://localhost:4000',
          merchantId: 'dev-merchant-123',
          apiKey: 'dev-api-key-123'
        },
        docker: {
          backendUrl: 'http://backend:3000',
          pspUrl: 'http://psp-emulator:4000',
          merchantId: 'docker-merchant-123',
          apiKey: 'docker-api-key-123'
        },
        production: {
          backendUrl: 'https://api.payment-platform.com',
          pspUrl: 'https://psp.payment-platform.com',
          merchantId: 'prod-merchant-123',
          apiKey: 'prod-api-key-123'
        }
      }

      if (presets[preset]) {
        Object.assign(credentials, presets[preset])
        showStatus(`üìã Configuration "${preset}" charg√©e`, 'info')
      }
    }

    const loadSavedCredentials = () => {
      try {
        const saved = localStorage.getItem('testMerchantCredentials')
        if (saved) {
          Object.assign(credentials, JSON.parse(saved))
          api.setCredentials(credentials)
        }
      } catch (error) {
        console.error('Erreur lors du chargement des credentials:', error)
      }
    }

    onMounted(() => {
      loadSavedCredentials()
      testConnection()
    })

    return {
      credentials,
      connectionStatus,
      lastTestResults,
      loading,
      showApiKey,
      statusMessage,
      statusClass,
      statusIcon,
      saveCredentials,
      testConnection,
      loadPreset
    }
  }
}
</script>

<style scoped>
/* Animations personnalis√©es */
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.5s;
}
.fade-enter-from, .fade-leave-to {
  opacity: 0;
}
</style>
<template>
  <div class="configuration-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 class="text-3xl font-bold text-gray-800 mb-2">‚öôÔ∏è Configuration Compl√®te</h1>
          <p class="text-gray-600">Configurez tous les param√®tres n√©cessaires pour tester la plateforme de paiement</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Credentials API -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
              üîê Credentials API
              <span v-if="credentialsStore.isConfigured" class="ml-2 text-green-600 text-sm">‚úì Configur√©</span>
            </h2>
            
            <form @submit.prevent="saveCredentials" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Merchant ID</label>
                <input
                  v-model="credentials.merchantId"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="merchant-123"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">API Key</label>
                <input
                  v-model="credentials.apiKey"
                  type="password"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="api-key-secret"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Backend URL</label>
                <input
                  v-model="credentials.backendUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="http://localhost:3000"
                  required
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">PSP URL</label>
                <input
                  v-model="credentials.pspUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="http://localhost:3002"
                  required
                />
              </div>

              <button
                type="submit"
                :disabled="isTestingConnection"
                class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
              >
                {{ isTestingConnection ? 'Test en cours...' : 'Sauvegarder & Tester' }}
              </button>
            </form>
          </div>

          <!-- URLs de Callback -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">üîó URLs de Callback</h2>
            
            <form @submit.prevent="saveUrls" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Webhook URL</label>
                <input
                  v-model="credentials.webhookUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="http://localhost:8081/webhook"
                />
                <p class="text-xs text-gray-500 mt-1">URL pour recevoir les notifications de paiement</p>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Return URL (Succ√®s)</label>
                <input
                  v-model="credentials.returnUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="http://localhost:8081/payment-return"
                />
                <p class="text-xs text-gray-500 mt-1">Redirection apr√®s paiement r√©ussi</p>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Cancel URL (Annulation)</label>
                <input
                  v-model="credentials.cancelUrl"
                  type="url"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="http://localhost:8081/payment-cancel"
                />
                <p class="text-xs text-gray-500 mt-1">Redirection apr√®s annulation</p>
              </div>

              <button
                type="submit"
                class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors"
              >
                Sauvegarder URLs
              </button>
            </form>
          </div>
        </div>

        <!-- Test de Connexion -->
        <div class="bg-white rounded-lg shadow-lg p-6 mt-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">üß™ Tests de Connexion</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="border border-gray-200 rounded-lg p-4">
              <h3 class="font-semibold text-gray-800 mb-2">Backend API</h3>
              <p class="text-sm text-gray-600 mb-3">Test de connectivit√© avec l'API backend</p>
              <button
                @click="testBackendConnection"
                :disabled="isTestingBackend"
                class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
              >
                {{ isTestingBackend ? 'Test...' : 'Tester Backend' }}
              </button>
              <div v-if="backendStatus" :class="backendStatus.success ? 'text-green-600' : 'text-red-600'" class="text-sm mt-2">
                {{ backendStatus.message }}
              </div>
            </div>

            <div class="border border-gray-200 rounded-lg p-4">
              <h3 class="font-semibold text-gray-800 mb-2">PSP Emulator</h3>
              <p class="text-sm text-gray-600 mb-3">Test de connectivit√© avec le PSP</p>
              <button
                @click="testPspConnection"
                :disabled="isTestingPsp"
                class="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 disabled:opacity-50 transition-colors"
              >
                {{ isTestingPsp ? 'Test...' : 'Tester PSP' }}
              </button>
              <div v-if="pspStatus" :class="pspStatus.success ? 'text-green-600' : 'text-red-600'" class="text-sm mt-2">
                {{ pspStatus.message }}
              </div>
            </div>

            <div class="border border-gray-200 rounded-lg p-4">
              <h3 class="font-semibold text-gray-800 mb-2">Webhook</h3>
              <p class="text-sm text-gray-600 mb-3">Test de r√©ception webhook</p>
              <button
                @click="testWebhook"
                :disabled="isTestingWebhook"
                class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:opacity-50 transition-colors"
              >
                {{ isTestingWebhook ? 'Test...' : 'Tester Webhook' }}
              </button>
              <div v-if="webhookStatus" :class="webhookStatus.success ? 'text-green-600' : 'text-red-600'" class="text-sm mt-2">
                {{ webhookStatus.message }}
              </div>
            </div>
          </div>
        </div>

        <!-- Configuration Avanc√©e -->
        <div class="bg-white rounded-lg shadow-lg p-6 mt-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">‚ö° Configuration Avanc√©e</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 class="font-semibold text-gray-800 mb-3">Options de Paiement</h3>
              <div class="space-y-2">
                <label class="flex items-center">
                  <input v-model="advancedConfig.enablePreauth" type="checkbox" class="mr-2">
                  Activer la pr√©-autorisation
                </label>
                <label class="flex items-center">
                  <input v-model="advancedConfig.enableRefunds" type="checkbox" class="mr-2">
                  Activer les remboursements
                </label>
                <label class="flex items-center">
                  <input v-model="advancedConfig.enableRecurring" type="checkbox" class="mr-2">
                  Activer les paiements r√©currents
                </label>
                <label class="flex items-center">
                  <input v-model="advancedConfig.enable3DS" type="checkbox" class="mr-2">
                  Activer 3D Secure
                </label>
              </div>
            </div>

            <div>
              <h3 class="font-semibold text-gray-800 mb-3">D√©lais et Timeouts</h3>
              <div class="space-y-3">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Timeout API (ms)</label>
                  <input
                    v-model.number="advancedConfig.apiTimeout"
                    type="number"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md"
                    min="1000"
                    max="30000"
                  />
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Retry Count</label>
                  <input
                    v-model.number="advancedConfig.retryCount"
                    type="number"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md"
                    min="0"
                    max="5"
                  />
                </div>
              </div>
            </div>
          </div>

          <button
            @click="saveAdvancedConfig"
            class="mt-4 bg-orange-600 text-white py-2 px-4 rounded-md hover:bg-orange-700 transition-colors"
          >
            Sauvegarder Configuration Avanc√©e
          </button>
        </div>

        <!-- Export/Import Configuration -->
        <div class="bg-white rounded-lg shadow-lg p-6 mt-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">üíæ Export/Import Configuration</h2>
          
          <div class="flex gap-4">
            <button
              @click="exportConfiguration"
              class="bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 transition-colors"
            >
              üì• Exporter Configuration
            </button>
            
            <label class="bg-cyan-600 text-white py-2 px-4 rounded-md hover:bg-cyan-700 transition-colors cursor-pointer">
              üì§ Importer Configuration
              <input
                type="file"
                @change="importConfiguration"
                accept=".json"
                class="hidden"
              />
            </label>
            
            <button
              @click="resetConfiguration"
              class="bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 transition-colors"
            >
              üóëÔ∏è Reset Configuration
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted } from 'vue'
import { useCredentialsStore } from '../stores/index.js'

const credentialsStore = useCredentialsStore()

// Form data
const credentials = reactive({ ...credentialsStore.$state })

const advancedConfig = reactive({
  enablePreauth: true,
  enableRefunds: true,
  enableRecurring: false,
  enable3DS: false,
  apiTimeout: 10000,
  retryCount: 3
})

// Test states
const isTestingConnection = ref(false)
const isTestingBackend = ref(false)
const isTestingPsp = ref(false)
const isTestingWebhook = ref(false)

const backendStatus = ref(null)
const pspStatus = ref(null)
const webhookStatus = ref(null)

// Actions
const saveCredentials = async () => {
  isTestingConnection.value = true
  try {
    credentialsStore.updateCredentials(credentials)
    await credentialsStore.testConnection()
    
    // Test backend connection
    await testBackendConnection()
  } finally {
    isTestingConnection.value = false
  }
}

const saveUrls = () => {
  credentialsStore.updateCredentials({
    webhookUrl: credentials.webhookUrl,
    returnUrl: credentials.returnUrl,
    cancelUrl: credentials.cancelUrl
  })
  alert('URLs sauvegard√©es avec succ√®s !')
}

const testBackendConnection = async () => {
  isTestingBackend.value = true
  try {
    const response = await fetch(`${credentials.backendUrl}/health`)
    if (response.ok) {
      backendStatus.value = { success: true, message: 'Backend accessible ‚úì' }
    } else {
      backendStatus.value = { success: false, message: `Erreur ${response.status}` }
    }
  } catch (error) {
    backendStatus.value = { success: false, message: 'Backend inaccessible ‚úó' }
  } finally {
    isTestingBackend.value = false
  }
}

const testPspConnection = async () => {
  isTestingPsp.value = true
  try {
    const response = await fetch(`${credentials.pspUrl}/health`)
    if (response.ok) {
      pspStatus.value = { success: true, message: 'PSP accessible ‚úì' }
    } else {
      pspStatus.value = { success: false, message: `Erreur ${response.status}` }
    }
  } catch (error) {
    pspStatus.value = { success: false, message: 'PSP inaccessible ‚úó' }
  } finally {
    isTestingPsp.value = false
  }
}

const testWebhook = async () => {
  isTestingWebhook.value = true
  try {
    // Simuler un test webhook
    setTimeout(() => {
      webhookStatus.value = { success: true, message: 'Webhook configur√© ‚úì' }
      isTestingWebhook.value = false
    }, 1000)
  } catch (error) {
    webhookStatus.value = { success: false, message: 'Erreur webhook ‚úó' }
    isTestingWebhook.value = false
  }
}

const saveAdvancedConfig = () => {
  localStorage.setItem('advancedConfig', JSON.stringify(advancedConfig))
  alert('Configuration avanc√©e sauvegard√©e !')
}

const exportConfiguration = () => {
  const config = {
    credentials: credentials,
    advancedConfig: advancedConfig,
    exportDate: new Date().toISOString()
  }
  
  const dataStr = JSON.stringify(config, null, 2)
  const dataBlob = new Blob([dataStr], { type: 'application/json' })
  
  const link = document.createElement('a')
  link.href = URL.createObjectURL(dataBlob)
  link.download = `merchant-config-${Date.now()}.json`
  link.click()
}

const importConfiguration = (event) => {
  const file = event.target.files[0]
  if (file) {
    const reader = new FileReader()
    reader.onload = (e) => {
      try {
        const config = JSON.parse(e.target.result)
        Object.assign(credentials, config.credentials)
        Object.assign(advancedConfig, config.advancedConfig)
        alert('Configuration import√©e avec succ√®s !')
      } catch (error) {
        alert('Erreur lors de l\'importation du fichier')
      }
    }
    reader.readAsText(file)
  }
}

const resetConfiguration = () => {
  if (confirm('√ätes-vous s√ªr de vouloir r√©initialiser la configuration ?')) {
    Object.assign(credentials, {
      merchantId: 'test-merchant-123',
      apiKey: 'test-api-key-123',
      backendUrl: 'http://localhost:3000',
      pspUrl: 'http://localhost:3002',
      webhookUrl: 'http://localhost:8081/webhook',
      returnUrl: 'http://localhost:8081/payment-return',
      cancelUrl: 'http://localhost:8081/payment-cancel'
    })
    
    Object.assign(advancedConfig, {
      enablePreauth: true,
      enableRefunds: true,
      enableRecurring: false,
      enable3DS: false,
      apiTimeout: 10000,
      retryCount: 3
    })
    
    localStorage.clear()
    alert('Configuration r√©initialis√©e !')
  }
}

onMounted(() => {
  credentialsStore.loadCredentials()
  Object.assign(credentials, credentialsStore.$state)
  
  const savedAdvanced = localStorage.getItem('advancedConfig')
  if (savedAdvanced) {
    Object.assign(advancedConfig, JSON.parse(savedAdvanced))
  }
})
</script>
<template>
  <div class="home">
    <div class="container mx-auto px-4 py-8">
      <!-- Hero Section -->
      <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl shadow-lg p-8 mb-8">
        <div class="text-center">
          <h1 class="text-4xl font-bold mb-4">üõçÔ∏è Test Merchant Portal</h1>
          <p class="text-xl mb-6">Portail de test pour valider les workflows de paiement</p>
          <div class="flex justify-center space-x-4">
            <router-link
              to="/config"
              class="bg-white text-blue-600 px-6 py-3 rounded-lg font-medium hover:bg-blue-50 transition-colors"
            >
              ‚öôÔ∏è Configuration
            </router-link>
            <router-link
              to="/shop"
              class="bg-blue-800 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-900 transition-colors"
            >
              üõí Boutique Test
            </router-link>
          </div>
        </div>
      </div>

      <!-- Features Grid -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <!-- Configuration Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
          <div class="text-center">
            <div class="text-4xl mb-4">‚öôÔ∏è</div>
            <h3 class="text-xl font-semibold text-gray-800 mb-3">Configuration API</h3>
            <p class="text-gray-600 mb-4">
              Configurez vos credentials pour connecter le site test √† la plateforme de paiement
            </p>
            <router-link
              to="/config"
              class="inline-block bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              Configurer
            </router-link>
          </div>
        </div>

        <!-- Shopping Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
          <div class="text-center">
            <div class="text-4xl mb-4">üõí</div>
            <h3 class="text-xl font-semibold text-gray-800 mb-3">Boutique de Test</h3>
            <p class="text-gray-600 mb-4">
              Simulez un e-commerce complet avec panier et processus de paiement
            </p>
            <router-link
              to="/shop"
              class="inline-block bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
            >
              Faire du shopping
            </router-link>
          </div>
        </div>

        <!-- Transactions Card -->
        <div class="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
          <div class="text-center">
            <div class="text-4xl mb-4">üí∞</div>
            <h3 class="text-xl font-semibold text-gray-800 mb-3">Gestion Transactions</h3>
            <p class="text-gray-600 mb-4">
              Visualisez et g√©rez les transactions, testez les remboursements
            </p>
            <router-link
              to="/transactions"
              class="inline-block bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors"
            >
              Voir les transactions
            </router-link>
          </div>
        </div>
      </div>

      <!-- Workflow Steps -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">üöÄ Workflow de Test</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="text-center">
            <div class="bg-blue-100 text-blue-600 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 text-xl font-bold">1</div>
            <h4 class="font-medium text-gray-800 mb-2">Configuration</h4>
            <p class="text-sm text-gray-600">Configurez vos API credentials</p>
          </div>
          <div class="text-center">
            <div class="bg-green-100 text-green-600 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 text-xl font-bold">2</div>
            <h4 class="font-medium text-gray-800 mb-2">Shopping</h4>
            <p class="text-sm text-gray-600">Ajoutez des produits au panier</p>
          </div>
          <div class="text-center">
            <div class="bg-yellow-100 text-yellow-600 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 text-xl font-bold">3</div>
            <h4 class="font-medium text-gray-800 mb-2">Paiement</h4>
            <p class="text-sm text-gray-600">Testez diff√©rents sc√©narios de paiement</p>
          </div>
          <div class="text-center">
            <div class="bg-purple-100 text-purple-600 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 text-xl font-bold">4</div>
            <h4 class="font-medium text-gray-800 mb-2">Gestion</h4>
            <p class="text-sm text-gray-600">G√©rez les transactions et remboursements</p>
          </div>
        </div>
      </div>

      <!-- Test Scenarios -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6">üß™ Sc√©narios de Test Disponibles</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="border border-gray-200 rounded-lg p-4">
            <h3 class="text-lg font-medium text-gray-800 mb-3">üí≥ Paiements Standards</h3>
            <ul class="text-sm text-gray-600 space-y-1">
              <li>‚úÖ Paiement r√©ussi avec capture imm√©diate</li>
              <li>üîí Pr√©-autorisation avec capture manuelle</li>
              <li>‚ùå Simulation d'√©chec de paiement</li>
              <li>üîÑ Paiements multiples pour tester les limites</li>
            </ul>
          </div>
          <div class="border border-gray-200 rounded-lg p-4">
            <h3 class="text-lg font-medium text-gray-800 mb-3">üí∏ Remboursements</h3>
            <ul class="text-sm text-gray-600 space-y-1">
              <li>üíØ Remboursement complet</li>
              <li>üîÑ Remboursement partiel</li>
              <li>üìä Suivi des statuts en temps r√©el</li>
              <li>üìß Test des webhooks de notification</li>
            </ul>
          </div>
        </div>
      </div>

      <!-- API Status -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6">üîå Status des Services</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div class="flex items-center">
              <div :class="serviceStatus.backend ? 'bg-green-500' : 'bg-red-500'" class="w-3 h-3 rounded-full mr-3"></div>
              <span class="font-medium">Backend API</span>
            </div>
            <span :class="serviceStatus.backend ? 'text-green-600' : 'text-red-600'" class="text-sm">
              {{ serviceStatus.backend ? 'En ligne' : 'Hors ligne' }}
            </span>
          </div>
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div class="flex items-center">
              <div :class="serviceStatus.psp ? 'bg-green-500' : 'bg-red-500'" class="w-3 h-3 rounded-full mr-3"></div>
              <span class="font-medium">PSP Emulator</span>
            </div>
            <span :class="serviceStatus.psp ? 'text-green-600' : 'text-red-600'" class="text-sm">
              {{ serviceStatus.psp ? 'En ligne' : 'Hors ligne' }}
            </span>
          </div>
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div class="flex items-center">
              <div :class="serviceStatus.webhooks ? 'bg-green-500' : 'bg-yellow-500'" class="w-3 h-3 rounded-full mr-3"></div>
              <span class="font-medium">Webhooks</span>
            </div>
            <span :class="serviceStatus.webhooks ? 'text-green-600' : 'text-yellow-600'" class="text-sm">
              {{ serviceStatus.webhooks ? 'Configur√©s' : 'Non configur√©s' }}
            </span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="mt-8 text-center">
        <p class="text-gray-600 mb-4">Pr√™t √† commencer ? Choisissez votre point d'entr√©e :</p>
        <div class="flex justify-center space-x-4">
          <router-link
            to="/config"
            class="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
          >
            üîß Commencer par la configuration
          </router-link>
          <router-link
            to="/shop"
            class="bg-green-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-green-700 transition-colors"
          >
            üõçÔ∏è Aller directement au shopping
          </router-link>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { reactive, onMounted } from 'vue'
import { useApi } from '@/services/api'

export default {
  name: 'Home',
  setup() {
    const api = useApi()

    const serviceStatus = reactive({
      backend: false,
      psp: false,
      webhooks: false
    })

    const checkServices = async () => {
      try {
        // Check Backend
        try {
          const backendResult = await api.health.checkBackend()
          serviceStatus.backend = backendResult.status === 'ok'
        } catch {
          serviceStatus.backend = false
        }

        // Check PSP
        try {
          const pspResult = await api.health.checkPSP()
          serviceStatus.psp = pspResult.status === 'ok'
        } catch {
          serviceStatus.psp = false
        }

        // Check Webhooks (simulate)
        serviceStatus.webhooks = true // √Ä am√©liorer avec une vraie v√©rification

      } catch (error) {
        console.error('Erreur lors de la v√©rification des services:', error)
      }
    }

    onMounted(() => {
      checkServices()
    })

    return {
      serviceStatus
    }
  }
}
</script>

<style scoped>
/* Animations */
.hover\:shadow-xl:hover {
  transform: translateY(-2px);
  transition: all 0.3s ease;
}

.transition-shadow {
  transition: box-shadow 0.3s ease;
}

.transition-colors {
  transition: background-color 0.3s ease, color 0.3s ease;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .grid {
    grid-template-columns: 1fr;
  }
  
  .flex {
    flex-direction: column;
    gap: 1rem;
  }
}
</style>
<template>
  <div class="shop-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-800 mb-2">üõçÔ∏è Boutique</h1>
              <p class="text-gray-600">D√©couvrez nos produits et ajoutez-les √† votre panier</p>
            </div>
            <router-link 
              v-if="cartItems.length > 0"
              to="/cart" 
              class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors flex items-center gap-2"
            >
              üõí Voir le panier ({{ cartItems.length }})
            </router-link>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <!-- Products Catalog -->
          <div class="lg:col-span-3">
            <div class="bg-white rounded-lg shadow-lg p-6">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-gray-800">üì¶ Catalogue Produits</h2>
                <button
                  @click="addRandomProduct"
                  class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                >
                  + Produit Al√©atoire
                </button>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                <ProductCard
                  v-for="product in products"
                  :key="product.id"
                  :product="product"
                  @add-to-cart="addToCart"
                />
              </div>

              <!-- Add Custom Product -->
              <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                <h3 class="text-lg font-medium text-gray-800 mb-3">‚ûï Ajouter un Produit Personnalis√©</h3>
                <form @submit.prevent="addCustomProduct" class="grid grid-cols-1 md:grid-cols-4 gap-3">
                  <input
                    v-model="customProduct.name"
                    type="text"
                    placeholder="Nom du produit"
                    class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                  <input
                    v-model.number="customProduct.price"
                    type="number"
                    step="0.01"
                    placeholder="Prix (‚Ç¨)"
                    class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                  <input
                    v-model="customProduct.category"
                    type="text"
                    placeholder="Cat√©gorie"
                    class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <button
                    type="submit"
                    class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Ajouter
                  </button>
                </form>
              </div>
            </div>
          </div>

          <!-- Mini Cart Summary -->
          <div class="lg:col-span-1">
            <div class="bg-white rounded-lg shadow-lg p-6 sticky top-4">
              <h2 class="text-xl font-semibold text-gray-800 mb-4">üõí Panier</h2>
              
              <div v-if="cartItems.length === 0" class="text-center py-8 text-gray-500">
                <div class="text-4xl mb-2">üõí</div>
                <p>Votre panier est vide</p>
              </div>
              
              <div v-else>
                <div class="space-y-2 mb-4">
                  <div 
                    v-for="item in cartItems.slice(0, 3)" 
                    :key="item.id"
                    class="flex justify-between text-sm"
                  >
                    <span class="truncate">{{ item.name }} x{{ item.quantity }}</span>
                    <span>{{ (item.price * item.quantity).toFixed(2) }}‚Ç¨</span>
                  </div>
                  <div v-if="cartItems.length > 3" class="text-xs text-gray-500">
                    ... et {{ cartItems.length - 3 }} autre(s)
                  </div>
                </div>
                
                <div class="border-t pt-3 mb-4">
                  <div class="flex justify-between font-bold">
                    <span>Total</span>
                    <span>{{ cartTotal.toFixed(2) }}‚Ç¨</span>
                  </div>
                </div>
                
                <div class="space-y-2">
                  <router-link 
                    to="/cart"
                    class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors text-center block"
                  >
                    Voir le panier
                  </router-link>
                  <button
                    @click="clearCart"
                    class="w-full bg-gray-400 text-white py-1 px-4 rounded-md hover:bg-gray-500 transition-colors text-sm"
                  >
                    Vider
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, computed, onMounted } from 'vue'
import ProductCard from '../components/ProductCard.vue'
import { useCartStore } from '../stores/index.js'

const cartStore = useCartStore()

const customProduct = reactive({
  name: '',
  price: 0,
  category: ''
})

// Sample products
const products = ref([
  {
    id: 1,
    name: 'Smartphone Pro',
    price: 899.99,
    category: '√âlectronique',
    image: 'üì±',
    description: 'Dernier smartphone avec technologie avanc√©e'
  },
  {
    id: 2,
    name: 'Casque Audio',
    price: 199.99,
    category: 'Audio',
    image: 'üéß',
    description: 'Casque sans fil avec r√©duction de bruit'
  },
  {
    id: 3,
    name: 'Ordinateur Portable',
    price: 1299.99,
    category: 'Informatique',
    image: 'üíª',
    description: 'Laptop haute performance pour professionnels'
  },
  {
    id: 4,
    name: 'Montre Connect√©e',
    price: 299.99,
    category: 'Accessoires',
    image: '‚åö',
    description: 'Montre intelligente avec suivi fitness'
  },
  {
    id: 5,
    name: 'Tablette Graphique',
    price: 449.99,
    category: 'Design',
    image: 'üé®',
    description: 'Tablette professionnelle pour cr√©ateurs'
  },
  {
    id: 6,
    name: 'Appareil Photo',
    price: 1899.99,
    category: 'Photo',
    image: 'üì∑',
    description: 'Reflex num√©rique professionnel'
  }
])

// Computed properties
const cartItems = computed(() => cartStore.items)
const cartTotal = computed(() => cartStore.total)

// Cart management
const addToCart = (product) => {
  cartStore.addItem({
    id: product.id,
    name: product.name,
    price: product.price,
    category: product.category,
    image: product.image
  })
}

const clearCart = () => {
  if (confirm('√ätes-vous s√ªr de vouloir vider votre panier ?')) {
    cartStore.clearCart()
  }
}

// Product management
const addCustomProduct = () => {
  if (customProduct.name && customProduct.price > 0) {
    const newProduct = {
      id: Date.now(), // Simple ID based on timestamp
      name: customProduct.name,
      price: customProduct.price,
      category: customProduct.category || 'Divers',
      image: 'üì¶',
      description: `Produit personnalis√©: ${customProduct.name}`
    }
    
    products.value.push(newProduct)
    
    // Reset form
    customProduct.name = ''
    customProduct.price = 0
    customProduct.category = ''
  }
}

const addRandomProduct = () => {
  const randomProducts = [
    { name: 'Clavier M√©canique', price: 149.99, category: 'Informatique', image: '‚å®Ô∏è' },
    { name: 'Souris Gaming', price: 79.99, category: 'Gaming', image: 'üñ±Ô∏è' },
    { name: '√âcran 4K', price: 399.99, category: '√âcrans', image: 'üñ•Ô∏è' },
    { name: 'Enceinte Bluetooth', price: 129.99, category: 'Audio', image: 'üîä' },
    { name: 'Chargeur Sans Fil', price: 49.99, category: 'Accessoires', image: 'üîå' },
    { name: 'Disque SSD', price: 189.99, category: 'Stockage', image: 'üíæ' },
    { name: 'Webcam HD', price: 89.99, category: 'Vid√©o', image: 'üìπ' },
    { name: 'Microphone USB', price: 119.99, category: 'Audio', image: 'üé§' }
  ]
  
  const randomProduct = randomProducts[Math.floor(Math.random() * randomProducts.length)]
  const newProduct = {
    id: Date.now(),
    ...randomProduct,
    description: `Produit al√©atoire: ${randomProduct.name}`
  }
  
  products.value.push(newProduct)
}

onMounted(() => {
  // Charger le panier depuis le store
  cartStore.loadCart()
})
</script>

<style scoped>
/* Scrollbar personnalis√©e */
.overflow-y-auto::-webkit-scrollbar {
  width: 4px;
}

.overflow-y-auto::-webkit-scrollbar-track {
  background: #f1f1f1;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 2px;
}

.overflow-y-auto::-webkit-scrollbar-thumb:hover {
  background: #555;
}
</style>
<template>
  <div class="transactions-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-7xl mx-auto">
        <!-- Header avec Stats -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div class="flex justify-between items-center mb-4">
            <div>
              <h1 class="text-3xl font-bold text-gray-800 mb-2">üí∞ Gestion des Transactions</h1>
              <p class="text-gray-600">Historique et gestion de tous les paiements</p>
            </div>
            <div class="flex gap-2">
              <button
                @click="refreshTransactions"
                :disabled="isLoading"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
              >
                üîÑ Actualiser
              </button>
              <button
                @click="exportTransactions"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                üì• Exporter
              </button>
            </div>
          </div>

          <!-- Statistics Cards -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-blue-600 text-sm font-medium">Total Transactions</p>
                  <p class="text-2xl font-bold text-blue-800">{{ transactionsStore.transactions.length }}</p>
                </div>
                <div class="text-3xl text-blue-600">üìä</div>
              </div>
            </div>

            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-green-600 text-sm font-medium">Succ√®s</p>
                  <p class="text-2xl font-bold text-green-800">{{ transactionsStore.successfulTransactions.length }}</p>
                </div>
                <div class="text-3xl text-green-600">‚úÖ</div>
              </div>
            </div>

            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-red-600 text-sm font-medium">√âchecs</p>
                  <p class="text-2xl font-bold text-red-800">{{ transactionsStore.failedTransactions.length }}</p>
                </div>
                <div class="text-3xl text-red-600">‚ùå</div>
              </div>
            </div>

            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-purple-600 text-sm font-medium">Montant Total</p>
                  <p class="text-2xl font-bold text-purple-800">{{ formatCurrency(transactionsStore.totalAmount) }}</p>
                </div>
                <div class="text-3xl text-purple-600">üí∞</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Filters -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 class="text-lg font-semibold text-gray-800 mb-4">üîç Filtres</h2>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
              <select v-model="filters.status" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                <option value="">Tous</option>
                <option value="captured">Captur√©</option>
                <option value="authorized">Autoris√©</option>
                <option value="failed">√âchou√©</option>
                <option value="refunded">Rembours√©</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
              <select v-model="filters.type" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                <option value="">Tous</option>
                <option value="standard">Standard</option>
                <option value="preauth">Pr√©-autorisation</option>
                <option value="recurring">R√©current</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Date d√©but</label>
              <input
                v-model="filters.dateFrom"
                type="date"
                class="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Date fin</label>
              <input
                v-model="filters.dateTo"
                type="date"
                class="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
          </div>

          <div class="mt-4 flex gap-2">
            <button
              @click="applyFilters"
              class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              Appliquer les filtres
            </button>
            <button
              @click="clearFilters"
              class="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition-colors"
            >
              Effacer
            </button>
          </div>
        </div>

        <!-- Transactions Table -->
        <div class="bg-white rounded-lg shadow-lg overflow-hidden">
          <div class="p-6 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">üìã Liste des Transactions</h2>
          </div>

          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Transaction ID
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date/Heure
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Montant
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Statut
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Type
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <tr v-for="transaction in filteredTransactions" :key="transaction.id" class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                    {{ transaction.id }}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {{ formatDate(transaction.timestamp) }}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">
                    {{ formatCurrency(transaction.amount) }}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span :class="getStatusClass(transaction.status)" class="inline-flex px-2 py-1 text-xs font-semibold rounded-full">
                      {{ getStatusText(transaction.status) }}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {{ transaction.type || 'standard' }}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                    <button
                      @click="viewTransaction(transaction)"
                      class="text-blue-600 hover:text-blue-900"
                    >
                      üëÅÔ∏è Voir
                    </button>
                    
                    <button
                      v-if="transaction.status === 'authorized'"
                      @click="captureTransaction(transaction)"
                      class="text-green-600 hover:text-green-900"
                    >
                      üí∞ Capturer
                    </button>
                    
                    <button
                      v-if="transaction.status === 'captured'"
                      @click="refundTransaction(transaction)"
                      class="text-orange-600 hover:text-orange-900"
                    >
                      ‚Ü©Ô∏è Rembourser
                    </button>
                    
                    <button
                      v-if="['authorized', 'captured'].includes(transaction.status)"
                      @click="cancelTransaction(transaction)"
                      class="text-red-600 hover:text-red-900"
                    >
                      ‚ùå Annuler
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>

            <div v-if="filteredTransactions.length === 0" class="text-center py-12">
              <div class="text-6xl mb-4">üì≠</div>
              <h3 class="text-lg font-semibold text-gray-800 mb-2">Aucune transaction trouv√©e</h3>
              <p class="text-gray-600">Commencez par effectuer un paiement dans la boutique</p>
              <router-link to="/shop" class="mt-4 inline-block bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                Aller √† la boutique
              </router-link>
            </div>
          </div>
        </div>

        <!-- Transaction Detail Modal -->
        <div v-if="selectedTransaction" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-semibold text-gray-800">D√©tails de la Transaction</h3>
              <button @click="selectedTransaction = null" class="text-gray-500 hover:text-gray-700">
                ‚úï
              </button>
            </div>

            <div class="space-y-3">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="text-sm font-medium text-gray-700">ID Transaction</label>
                  <p class="font-mono text-sm bg-gray-100 p-2 rounded">{{ selectedTransaction.id }}</p>
                </div>
                <div>
                  <label class="text-sm font-medium text-gray-700">Statut</label>
                  <p :class="getStatusClass(selectedTransaction.status)" class="inline-flex px-2 py-1 text-xs font-semibold rounded-full">
                    {{ getStatusText(selectedTransaction.status) }}
                  </p>
                </div>
              </div>

              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="text-sm font-medium text-gray-700">Montant</label>
                  <p class="text-lg font-bold">{{ formatCurrency(selectedTransaction.amount) }}</p>
                </div>
                <div>
                  <label class="text-sm font-medium text-gray-700">Date</label>
                  <p>{{ formatDate(selectedTransaction.timestamp) }}</p>
                </div>
              </div>

              <div v-if="selectedTransaction.items" class="mt-4">
                <label class="text-sm font-medium text-gray-700">Articles</label>
                <div class="mt-2 bg-gray-50 rounded p-3">
                  <div v-for="item in selectedTransaction.items" :key="item.name" class="flex justify-between text-sm">
                    <span>{{ item.name }} x{{ item.quantity }}</span>
                    <span>{{ formatCurrency(item.total) }}</span>
                  </div>
                </div>
              </div>

              <div v-if="selectedTransaction.metadata" class="mt-4">
                <label class="text-sm font-medium text-gray-700">M√©tadonn√©es</label>
                <pre class="mt-2 bg-gray-100 p-3 rounded text-xs overflow-x-auto">{{ JSON.stringify(selectedTransaction.metadata, null, 2) }}</pre>
              </div>
            </div>

            <div class="mt-6 flex gap-2">
              <button
                v-if="selectedTransaction.status === 'authorized'"
                @click="captureTransaction(selectedTransaction)"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
              >
                üí∞ Capturer
              </button>
              <button
                v-if="selectedTransaction.status === 'captured'"
                @click="refundTransaction(selectedTransaction)"
                class="bg-orange-600 text-white px-4 py-2 rounded-md hover:bg-orange-700"
              >
                ‚Ü©Ô∏è Rembourser
              </button>
              <button
                @click="selectedTransaction = null"
                class="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500"
              >
                Fermer
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, reactive, onMounted } from 'vue'
import { useTransactionsStore } from '../stores/index.js'

const transactionsStore = useTransactionsStore()

const isLoading = ref(false)
const selectedTransaction = ref(null)

const filters = reactive({
  status: '',
  type: '',
  dateFrom: '',
  dateTo: ''
})

const filteredTransactions = computed(() => {
  let transactions = [...transactionsStore.transactions]
  
  if (filters.status) {
    transactions = transactions.filter(t => t.status === filters.status)
  }
  
  if (filters.type) {
    transactions = transactions.filter(t => t.type === filters.type)
  }
  
  if (filters.dateFrom) {
    transactions = transactions.filter(t => new Date(t.timestamp) >= new Date(filters.dateFrom))
  }
  
  if (filters.dateTo) {
    transactions = transactions.filter(t => new Date(t.timestamp) <= new Date(filters.dateTo))
  }
  
  return transactions.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
})

// Helper functions
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'EUR'
  }).format(amount)
}

const formatDate = (timestamp) => {
  return new Intl.DateTimeFormat('fr-FR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  }).format(new Date(timestamp))
}

const getStatusClass = (status) => {
  const classes = {
    captured: 'bg-green-100 text-green-800',
    authorized: 'bg-yellow-100 text-yellow-800',
    failed: 'bg-red-100 text-red-800',
    refunded: 'bg-gray-100 text-gray-800',
    cancelled: 'bg-gray-100 text-gray-800'
  }
  return classes[status] || 'bg-gray-100 text-gray-800'
}

const getStatusText = (status) => {
  const texts = {
    captured: 'Captur√©',
    authorized: 'Autoris√©',
    failed: '√âchou√©',
    refunded: 'Rembours√©',
    cancelled: 'Annul√©'
  }
  return texts[status] || status
}

// Actions
const refreshTransactions = async () => {
  isLoading.value = true
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    transactionsStore.loadTransactions()
  } finally {
    isLoading.value = false
  }
}

const applyFilters = () => {
  // Filters are reactive, so they automatically apply
  console.log('Filters applied:', filters)
}

const clearFilters = () => {
  Object.assign(filters, {
    status: '',
    type: '',
    dateFrom: '',
    dateTo: ''
  })
}

const viewTransaction = (transaction) => {
  selectedTransaction.value = transaction
}

const captureTransaction = async (transaction) => {
  if (confirm(`Capturer la transaction ${transaction.id} ?`)) {
    transactionsStore.updateTransaction(transaction.id, {
      status: 'captured',
      captureDate: new Date().toISOString()
    })
    selectedTransaction.value = null
    alert('Transaction captur√©e avec succ√®s !')
  }
}

const refundTransaction = async (transaction) => {
  const amount = prompt(`Montant √† rembourser (max: ${transaction.amount}‚Ç¨):`, transaction.amount)
  if (amount && parseFloat(amount) > 0) {
    transactionsStore.updateTransaction(transaction.id, {
      status: 'refunded',
      refundAmount: parseFloat(amount),
      refundDate: new Date().toISOString()
    })
    selectedTransaction.value = null
    alert('Remboursement effectu√© avec succ√®s !')
  }
}

const cancelTransaction = async (transaction) => {
  if (confirm(`Annuler la transaction ${transaction.id} ?`)) {
    transactionsStore.updateTransaction(transaction.id, {
      status: 'cancelled',
      cancelDate: new Date().toISOString()
    })
    selectedTransaction.value = null
    alert('Transaction annul√©e avec succ√®s !')
  }
}

const exportTransactions = () => {
  const dataStr = JSON.stringify(filteredTransactions.value, null, 2)
  const dataBlob = new Blob([dataStr], { type: 'application/json' })
  
  const link = document.createElement('a')
  link.href = URL.createObjectURL(dataBlob)
  link.download = `transactions-${Date.now()}.json`
  link.click()
}

onMounted(() => {
  transactionsStore.loadTransactions()
})
</script>
<template>
  <div class="payment-return-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-2xl mx-auto">
        <!-- Success Result -->
        <div class="bg-white rounded-lg shadow-lg p-8 text-center">
          <div class="text-6xl mb-6">‚úÖ</div>
          <h1 class="text-3xl font-bold text-green-800 mb-4">Paiement R√©ussi !</h1>
          <p class="text-gray-600 mb-6">Votre transaction a √©t√© trait√©e avec succ√®s.</p>

          <!-- Transaction Details -->
          <div v-if="transactionDetails" class="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
            <h2 class="text-lg font-semibold text-green-800 mb-4">D√©tails de la Transaction</h2>
            <div class="space-y-2 text-left">
              <div class="flex justify-between">
                <span class="font-medium">ID Transaction:</span>
                <span class="font-mono text-sm">{{ transactionDetails.id }}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Montant:</span>
                <span class="font-bold text-green-800">{{ formatCurrency(transactionDetails.amount) }}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Date:</span>
                <span>{{ formatDate(transactionDetails.timestamp) }}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Statut:</span>
                <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-sm">
                  {{ transactionDetails.status }}
                </span>
              </div>
            </div>
          </div>

          <!-- Order Summary -->
          <div v-if="orderItems && orderItems.length > 0" class="bg-gray-50 rounded-lg p-6 mb-6">
            <h3 class="font-semibold text-gray-800 mb-3">R√©sum√© de la Commande</h3>
            <div class="space-y-2">
              <div v-for="item in orderItems" :key="item.id" class="flex justify-between text-sm">
                <span>{{ item.name }} x{{ item.quantity }}</span>
                <span>{{ formatCurrency(item.price * item.quantity) }}</span>
              </div>
              <div class="border-t pt-2 font-bold flex justify-between">
                <span>Total:</span>
                <span>{{ formatCurrency(orderTotal) }}</span>
              </div>
            </div>
          </div>

          <!-- Next Steps -->
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
            <h3 class="font-semibold text-blue-800 mb-3">üéâ Prochaines √âtapes</h3>
            <div class="text-left text-blue-700 space-y-2">
              <p>‚úì Votre paiement a √©t√© confirm√©</p>
              <p>‚úì Un email de confirmation va √™tre envoy√©</p>
              <p>‚úì Votre commande sera trait√©e dans les plus brefs d√©lais</p>
            </div>
          </div>

          <!-- Actions -->
          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <router-link
              to="/transactions"
              class="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors"
            >
              üìã Voir mes Transactions
            </router-link>
            <router-link
              to="/shop"
              class="bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 transition-colors"
            >
              üõçÔ∏è Continuer mes Achats
            </router-link>
            <router-link
              to="/"
              class="bg-gray-600 text-white px-6 py-3 rounded-md hover:bg-gray-700 transition-colors"
            >
              üè† Retour Accueil
            </router-link>
          </div>

          <!-- Support Info -->
          <div class="mt-8 p-4 bg-gray-100 rounded-lg">
            <p class="text-sm text-gray-600">
              <strong>Besoin d'aide ?</strong><br>
              Contactez notre support: <a href="mailto:support@example.com" class="text-blue-600">support@example.com</a><br>
              R√©f√©rence de transaction: <span class="font-mono">{{ transactionDetails?.id || 'N/A' }}</span>
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRoute } from 'vue-router'
import { useTransactionsStore, useCartStore } from '../stores/index.js'

const route = useRoute()
const transactionsStore = useTransactionsStore()
const cartStore = useCartStore()

const transactionDetails = ref(null)
const orderItems = ref([])

const orderTotal = computed(() => {
  return orderItems.value.reduce((total, item) => total + (item.price * item.quantity), 0)
})

// Helper functions
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'EUR'
  }).format(amount)
}

const formatDate = (timestamp) => {
  return new Intl.DateTimeFormat('fr-FR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(timestamp))
}

onMounted(() => {
  // Get transaction details from URL params or last transaction
  const transactionId = route.query.transaction_id || route.query.txn_id
  
  if (transactionId) {
    // Find transaction in store
    const transaction = transactionsStore.transactions.find(t => t.id === transactionId)
    if (transaction) {
      transactionDetails.value = transaction
      orderItems.value = transaction.items || []
    }
  } else {
    // Use last transaction if no ID provided
    if (cartStore.lastTransaction) {
      transactionDetails.value = cartStore.lastTransaction
      orderItems.value = cartStore.lastTransaction.items || []
    }
  }
  
  // If still no transaction, create a mock one
  if (!transactionDetails.value) {
    transactionDetails.value = {
      id: 'TXN_' + Date.now(),
      amount: 299.99,
      status: 'captured',
      timestamp: new Date().toISOString()
    }
  }
  
  // Clear cart after successful payment
  setTimeout(() => {
    cartStore.clearCart()
  }, 2000)
})
</script>
<template>
  <div class="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center p-4">
    <div class="max-w-md w-full bg-white rounded-xl shadow-2xl overflow-hidden">
      <!-- Header -->
      <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 text-center">
        <h1 class="text-2xl font-bold mb-2">üîê Test Merchant Portal</h1>
        <p class="text-blue-100">{{ isLogin ? 'Connexion √† votre compte' : 'Cr√©er un nouveau compte' }}</p>
      </div>

      <!-- Form -->
      <div class="p-6">
        <!-- Toggle Tabs -->
        <div class="flex mb-6 bg-gray-100 rounded-lg p-1">
          <button
            @click="isLogin = true"
            :class="{ 'bg-white shadow-sm': isLogin, 'text-gray-600': !isLogin }"
            class="flex-1 py-2 px-4 rounded-md font-medium transition-all duration-200"
          >
            Connexion
          </button>
          <button
            @click="isLogin = false"
            :class="{ 'bg-white shadow-sm': !isLogin, 'text-gray-600': isLogin }"
            class="flex-1 py-2 px-4 rounded-md font-medium transition-all duration-200"
          >
            Inscription
          </button>
        </div>

        <!-- Status Message -->
        <div v-if="statusMessage" :class="statusClass" class="p-3 rounded-lg mb-4">
          <div class="flex items-center">
            <div class="text-sm">{{ statusMessage }}</div>
          </div>
        </div>

        <!-- Login Form -->
        <form v-if="isLogin" @submit.prevent="handleLogin" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input
              v-model="loginForm.email"
              type="email"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="votre@email.com"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Mot de passe</label>
            <div class="relative">
              <input
                v-model="loginForm.password"
                :type="showPassword ? 'text' : 'password'"
                required
                class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <button
                type="button"
                @click="showPassword = !showPassword"
                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
              >
                {{ showPassword ? 'üôà' : 'üëÅÔ∏è' }}
              </button>
            </div>
          </div>

          <button
            type="submit"
            :disabled="loading"
            class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {{ loading ? 'Connexion...' : 'Se connecter' }}
          </button>
        </form>

        <!-- Register Form -->
        <form v-else @submit.prevent="handleRegister" class="space-y-4">
          <div class="grid grid-cols-2 gap-3">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Pr√©nom</label>
              <input
                v-model="registerForm.firstName"
                type="text"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Jean"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Nom</label>
              <input
                v-model="registerForm.lastName"
                type="text"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Dupont"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input
              v-model="registerForm.email"
              type="email"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="votre@email.com"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Mot de passe</label>
            <div class="relative">
              <input
                v-model="registerForm.password"
                :type="showPassword ? 'text' : 'password'"
                required
                minlength="6"
                class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
              <button
                type="button"
                @click="showPassword = !showPassword"
                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
              >
                {{ showPassword ? 'üôà' : 'üëÅÔ∏è' }}
              </button>
            </div>
            <p class="text-xs text-gray-500 mt-1">Minimum 6 caract√®res</p>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Confirmer le mot de passe</label>
            <input
              v-model="registerForm.confirmPassword"
              :type="showPassword ? 'text' : 'password'"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            />
          </div>

          <div class="flex items-center">
            <input
              v-model="registerForm.acceptTerms"
              type="checkbox"
              required
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label class="ml-2 block text-sm text-gray-700">
              J'accepte les <a href="#" class="text-blue-600 hover:text-blue-800">conditions d'utilisation</a>
            </label>
          </div>

          <button
            type="submit"
            :disabled="loading || !isPasswordValid"
            class="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {{ loading ? 'Cr√©ation...' : 'Cr√©er le compte' }}
          </button>
        </form>

        <!-- Quick Demo Access -->
        <div class="mt-6 pt-6 border-t border-gray-200">
          <p class="text-sm text-gray-600 text-center mb-3">Acc√®s rapide pour les tests :</p>
          <button
            @click="quickDemo"
            class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors text-sm"
          >
            üöÄ Acc√®s d√©mo rapide (sans authentification)
          </button>
        </div>

        <!-- Links -->
        <div class="mt-4 text-center space-y-2">
          <p class="text-sm text-gray-600">
            Besoin d'aide ? 
            <a href="#" class="text-blue-600 hover:text-blue-800">Support technique</a>
          </p>
          <p class="text-xs text-gray-500">
            Version de test - Donn√©es simul√©es uniquement
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, computed } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth'
import { useApi } from '@/services/api'

export default {
  name: 'AuthPage',
  setup() {
    const router = useRouter()
    const authStore = useAuthStore()
    const api = useApi()

    const isLogin = ref(true)
    const loading = ref(false)
    const showPassword = ref(false)
    const statusMessage = ref('')
    const statusType = ref('')

    const loginForm = reactive({
      email: '',
      password: ''
    })

    const registerForm = reactive({
      firstName: '',
      lastName: '',
      email: '',
      password: '',
      confirmPassword: '',
      acceptTerms: false
    })

    const statusClass = computed(() => {
      return {
        'bg-green-100 border border-green-400 text-green-700': statusType.value === 'success',
        'bg-red-100 border border-red-400 text-red-700': statusType.value === 'error',
        'bg-blue-100 border border-blue-400 text-blue-700': statusType.value === 'info',
        'bg-yellow-100 border border-yellow-400 text-yellow-700': statusType.value === 'warning'
      }
    })

    const isPasswordValid = computed(() => {
      return registerForm.password.length >= 6 && 
             registerForm.password === registerForm.confirmPassword
    })

    const showStatus = (message, type = 'info') => {
      statusMessage.value = message
      statusType.value = type
      setTimeout(() => {
        statusMessage.value = ''
        statusType.value = ''
      }, 5000)
    }

    const handleLogin = async () => {
      loading.value = true
      try {
        // Essayer l'API r√©elle
        try {
          const response = await api.auth.login(loginForm)
          if (response.token) {
            authStore.setUser({
              email: loginForm.email,
              token: response.token,
              profile: response.user
            })
            showStatus('‚úÖ Connexion r√©ussie !', 'success')
            setTimeout(() => router.push({ name: 'CredentialsConfig' }), 1000)
            return
          }
        } catch (apiError) {
          console.warn('API non disponible, mode simulation activ√©')
        }

        // Mode simulation pour les tests
        if (loginForm.email && loginForm.password) {
          authStore.setUser({
            email: loginForm.email,
            token: `demo_token_${Date.now()}`,
            profile: {
              id: 'demo_user',
              email: loginForm.email,
              firstName: 'Demo',
              lastName: 'User'
            }
          })
          showStatus('‚úÖ Connexion en mode d√©mo r√©ussie !', 'success')
          setTimeout(() => router.push({ name: 'CredentialsConfig' }), 1000)
        }

      } catch (error) {
        console.error('Erreur de connexion:', error)
        showStatus('‚ùå Erreur de connexion. V√©rifiez vos identifiants.', 'error')
      } finally {
        loading.value = false
      }
    }

    const handleRegister = async () => {
      if (!isPasswordValid.value) {
        showStatus('‚ùå Les mots de passe ne correspondent pas', 'error')
        return
      }

      loading.value = true
      try {
        // Essayer l'API r√©elle
        try {
          const response = await api.auth.register({
            firstName: registerForm.firstName,
            lastName: registerForm.lastName,
            email: registerForm.email,
            password: registerForm.password
          })
          
          if (response.success) {
            showStatus('‚úÖ Compte cr√©√© ! V√©rifiez votre email pour activer votre compte.', 'success')
            isLogin.value = true
            return
          }
        } catch (apiError) {
          console.warn('API non disponible, mode simulation activ√©')
        }

        // Mode simulation
        authStore.setUser({
          email: registerForm.email,
          token: `demo_token_${Date.now()}`,
          profile: {
            id: 'demo_user',
            email: registerForm.email,
            firstName: registerForm.firstName,
            lastName: registerForm.lastName
          }
        })
        
        showStatus('‚úÖ Compte cr√©√© en mode d√©mo !', 'success')
        setTimeout(() => router.push({ name: 'CredentialsConfig' }), 1000)

      } catch (error) {
        console.error('Erreur d\'inscription:', error)
        showStatus('‚ùå Erreur lors de la cr√©ation du compte', 'error')
      } finally {
        loading.value = false
      }
    }

    const quickDemo = () => {
      authStore.setUser({
        email: 'demo@test-merchant.com',
        token: `demo_token_${Date.now()}`,
        profile: {
          id: 'demo_user',
          email: 'demo@test-merchant.com',
          firstName: 'Demo',
          lastName: 'User'
        }
      })
      
      showStatus('üöÄ Mode d√©mo activ√© !', 'success')
      setTimeout(() => router.push({ name: 'CredentialsConfig' }), 500)
    }

    return {
      isLogin,
      loading,
      showPassword,
      statusMessage,
      statusClass,
      loginForm,
      registerForm,
      isPasswordValid,
      handleLogin,
      handleRegister,
      quickDemo
    }
  }
}
</script>

<style scoped>
/* Animations */
.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.8s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(20px);
  opacity: 0;
}

/* Form animations */
input:focus {
  transform: scale(1.02);
  transition: transform 0.2s ease;
}

button:hover:not(:disabled) {
  transform: translateY(-1px);
  transition: transform 0.2s ease;
}

button:active:not(:disabled) {
  transform: translateY(0);
}
</style>
<template>
  <div class="cart-management">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-800 mb-2">ÔøΩÔ∏è Boutique</h1>
              <p class="text-gray-600">D√©couvrez nos produits et ajoutez-les √† votre panier</p>
            </div>
            <router-link 
              v-if="cartItems.length > 0"
              to="/cart" 
              class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors flex items-center gap-2"
            >
              üõí Voir le panier ({{ cartItems.length }})
            </router-link>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <!-- Products Catalog -->
          <div class="lg:col-span-3">
            <div class="bg-white rounded-lg shadow-lg p-6">
              <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-gray-800">üì¶ Catalogue Produits</h2>
                <button
                  @click="addRandomProduct"
                  class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                >
                  + Produit Al√©atoire
                </button>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                <ProductCard
                  v-for="product in products"
                  :key="product.id"
                  :product="product"
                  @add-to-cart="addToCart"
                />
              </div>

              <!-- Add Custom Product -->
              <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                <h3 class="text-lg font-medium text-gray-800 mb-3">‚ûï Ajouter un Produit Personnalis√©</h3>
                <form @submit.prevent="addCustomProduct" class="grid grid-cols-1 md:grid-cols-4 gap-3">
                  <input
                    v-model="customProduct.name"
                    type="text"
                    placeholder="Nom du produit"
                    class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                  <input
                    v-model.number="customProduct.price"
                    type="number"
                    step="0.01"
                    placeholder="Prix (‚Ç¨)"
                    class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                  <input
                    v-model="customProduct.category"
                    type="text"
                    placeholder="Cat√©gorie"
                    class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <button
                    type="submit"
                    class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Ajouter
                  </button>
                </form>
              </div>
            </div>
          </div>

          <!-- Mini Cart Summary -->
          <div class="lg:col-span-1">
            <div class="bg-white rounded-lg shadow-lg p-6 sticky top-4">
              <h2 class="text-xl font-semibold text-gray-800 mb-4">üõí Panier</h2>
              
              <div v-if="cartItems.length === 0" class="text-center py-8 text-gray-500">
                <div class="text-4xl mb-2">üõí</div>
                <p>Votre panier est vide</p>
              </div>
              
              <div v-else>
                <div class="space-y-2 mb-4">
                  <div 
                    v-for="item in cartItems.slice(0, 3)" 
                    :key="item.id"
                    class="flex justify-between text-sm"
                  >
                    <span class="truncate">{{ item.name }} x{{ item.quantity }}</span>
                    <span>{{ (item.price * item.quantity).toFixed(2) }}‚Ç¨</span>
                  </div>
                  <div v-if="cartItems.length > 3" class="text-xs text-gray-500">
                    ... et {{ cartItems.length - 3 }} autre(s)
                  </div>
                </div>
                
                <div class="border-t pt-3 mb-4">
                  <div class="flex justify-between font-bold">
                    <span>Total</span>
                    <span>{{ cartTotal.toFixed(2) }}‚Ç¨</span>
                  </div>
                </div>
                
                <div class="space-y-2">
                  <router-link 
                    to="/cart"
                    class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors text-center block"
                  >
                    Voir le panier
                  </router-link>
                  <button
                    @click="clearCart"
                    class="w-full bg-gray-400 text-white py-1 px-4 rounded-md hover:bg-gray-500 transition-colors text-sm"
                  >
                    Vider
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Payment Options -->
        <div class="bg-white rounded-lg shadow-lg p-6 mt-6" v-if="cartItems.length > 0">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">üí≥ Options de Paiement</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <!-- Standard Payment -->
            <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-blue-500 transition-colors">
              <div class="text-center">
                <div class="text-3xl mb-3">üí≥</div>
                <h3 class="text-lg font-medium text-gray-800 mb-2">Paiement Standard</h3>
                <p class="text-sm text-gray-600 mb-4">Workflow de paiement classique avec capture imm√©diate</p>
                <button
                  @click="initiatePayment('standard')"
                  :disabled="processingPayment"
                  class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
                >
                  {{ processingPayment ? 'Traitement...' : 'Payer Maintenant' }}
                </button>
              </div>
            </div>

            <!-- Pre-auth Payment -->
            <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-yellow-500 transition-colors">
              <div class="text-center">
                <div class="text-3xl mb-3">üîí</div>
                <h3 class="text-lg font-medium text-gray-800 mb-2">Pr√©-autorisation</h3>
                <p class="text-sm text-gray-600 mb-4">R√©servation avec capture manuelle ult√©rieure</p>
                <button
                  @click="initiatePayment('preauth')"
                  :disabled="processingPayment"
                  class="w-full bg-yellow-600 text-white py-2 px-4 rounded-md hover:bg-yellow-700 disabled:opacity-50 transition-colors"
                >
                  {{ processingPayment ? 'Traitement...' : 'Pr√©-autoriser' }}
                </button>
              </div>
            </div>

            <!-- Test Failure -->
            <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-red-500 transition-colors">
              <div class="text-center">
                <div class="text-3xl mb-3">‚ùå</div>
                <h3 class="text-lg font-medium text-gray-800 mb-2">Test d'√âchec</h3>
                <p class="text-sm text-gray-600 mb-4">Simuler un paiement refus√© pour tester les erreurs</p>
                <button
                  @click="initiatePayment('fail')"
                  :disabled="processingPayment"
                  class="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 disabled:opacity-50 transition-colors"
                >
                  {{ processingPayment ? 'Traitement...' : 'Simuler √âchec' }}
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Payment Result Modal -->
        <div v-if="paymentResult" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div class="text-center">
              <div class="text-6xl mb-4">
                {{ paymentResult.success ? '‚úÖ' : '‚ùå' }}
              </div>
              <h3 class="text-xl font-semibold text-gray-800 mb-2">
                {{ paymentResult.success ? 'Paiement R√©ussi' : 'Paiement √âchou√©' }}
              </h3>
              <p class="text-gray-600 mb-4">{{ paymentResult.message }}</p>
              
              <div v-if="paymentResult.details" class="bg-gray-50 rounded-lg p-3 mb-4 text-left">
                <div class="text-sm space-y-1">
                  <div><strong>Transaction ID:</strong> {{ paymentResult.details.transactionId }}</div>
                  <div><strong>Montant:</strong> {{ paymentResult.details.amount }}‚Ç¨</div>
                  <div><strong>Statut:</strong> {{ paymentResult.details.status }}</div>
                  <div v-if="paymentResult.details.error"><strong>Erreur:</strong> {{ paymentResult.details.error }}</div>
                </div>
              </div>

              <div class="flex gap-3">
                <button
                  @click="closePaymentResult"
                  class="flex-1 bg-gray-600 text-white py-2 px-4 rounded-md hover:bg-gray-700 transition-colors"
                >
                  Fermer
                </button>
                <button
                  v-if="paymentResult.success"
                  @click="viewTransaction"
                  class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
                >
                  Voir Transaction
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useCartStore } from '../stores/index.js'
import { useApi } from '../services/api.js'
import ProductCard from '../components/ProductCard.vue'

export default {
  name: 'CartManagement',
  components: {
    ProductCard
  },
  setup() {
    const router = useRouter()
    const cartStore = useCartStore()
    const api = useApi()

    const processingPayment = ref(false)
    const paymentResult = ref(null)

    const customProduct = reactive({
      name: '',
      price: 0,
      category: ''
    })

    // Sample products
    const products = ref([
      {
        id: 1,
        name: 'Smartphone Pro',
        price: 899.99,
        category: '√âlectronique',
        image: 'üì±',
        description: 'Dernier smartphone avec technologie avanc√©e'
      },
      {
        id: 2,
        name: 'Casque Audio',
        price: 199.99,
        category: 'Audio',
        image: 'üéß',
        description: 'Casque sans fil avec r√©duction de bruit'
      },
      {
        id: 3,
        name: 'Ordinateur Portable',
        price: 1299.99,
        category: 'Informatique',
        image: 'üíª',
        description: 'Laptop haute performance pour professionnels'
      },
      {
        id: 4,
        name: 'Montre Connect√©e',
        price: 299.99,
        category: 'Accessoires',
        image: '‚åö',
        description: 'Montre intelligente avec suivi fitness'
      },
      {
        id: 5,
        name: 'Tablette Graphique',
        price: 449.99,
        category: 'Design',
        image: 'üé®',
        description: 'Tablette professionnelle pour designers'
      },
      {
        id: 6,
        name: 'Console de Jeu',
        price: 499.99,
        category: 'Gaming',
        image: 'üéÆ',
        description: 'Console nouvelle g√©n√©ration'
      }
    ])

    const cartItems = computed(() => cartStore.items)
    const cartTotal = computed(() => cartStore.total)

    const addToCart = (product) => {
      cartStore.addItem(product)
    }

    const updateCartQuantity = (productId, quantity) => {
      cartStore.updateQuantity(productId, quantity)
    }

    const removeFromCart = (productId) => {
      cartStore.removeItem(productId)
    }

    const clearCart = () => {
      cartStore.clearCart()
    }

    const addCustomProduct = () => {
      if (customProduct.name && customProduct.price > 0) {
        const newProduct = {
          id: Date.now(),
          name: customProduct.name,
          price: customProduct.price,
          category: customProduct.category || 'Personnalis√©',
          image: 'üì¶',
          description: 'Produit personnalis√© ajout√© par l\'utilisateur'
        }
        
        products.value.push(newProduct)
        
        // Reset form
        customProduct.name = ''
        customProduct.price = 0
        customProduct.category = ''
      }
    }

    const addRandomProduct = () => {
      const randomProducts = [
        { name: 'Livre √âlectronique', price: 29.99, category: 'Lecture', image: 'üìö' },
        { name: 'Chargeur Portable', price: 39.99, category: 'Accessoires', image: 'üîå' },
        { name: 'Webcam HD', price: 89.99, category: 'Bureautique', image: 'üìπ' },
        { name: 'Clavier M√©canique', price: 149.99, category: 'P√©riph√©riques', image: '‚å®Ô∏è' },
        { name: 'Souris Gaming', price: 79.99, category: 'Gaming', image: 'üñ±Ô∏è' },
        { name: 'Micro USB', price: 59.99, category: 'Audio', image: 'üé§' }
      ]
      
      const randomProduct = randomProducts[Math.floor(Math.random() * randomProducts.length)]
      const newProduct = {
        id: Date.now(),
        ...randomProduct,
        description: 'Produit g√©n√©r√© al√©atoirement pour les tests'
      }
      
      products.value.push(newProduct)
    }

    const proceedToCheckout = () => {
      if (cartItems.value.length === 0) return
      
      // Pas besoin de redirection, les options de paiement sont sur la m√™me page
      document.querySelector('.bg-white.rounded-lg.shadow-lg.p-6.mt-6')?.scrollIntoView({
        behavior: 'smooth'
      })
    }

    const initiatePayment = async (type) => {
      if (cartItems.value.length === 0) return

      processingPayment.value = true

      try {
        // Pr√©parer les donn√©es de la commande
        const orderData = {
          amount: cartTotal.value,
          currency: 'EUR',
          description: `Commande de ${cartItems.value.length} article(s)`,
          items: cartItems.value.map(item => ({
            name: item.name,
            quantity: item.quantity,
            price: item.price,
            total: item.quantity * item.price
          })),
          metadata: {
            orderType: type,
            timestamp: new Date().toISOString()
          }
        }

        // Simuler diff√©rents types de paiement
        let paymentResponse
        
        if (type === 'fail') {
          // Simuler un √©chec
          paymentResponse = {
            success: false,
            message: 'Paiement refus√© par la banque',
            details: {
              transactionId: `TXN_FAIL_${Date.now()}`,
              amount: cartTotal.value,
              status: 'failed',
              error: 'Insufficient funds'
            }
          }
        } else {
          // Simuler un succ√®s
          const transactionId = `TXN_${type.toUpperCase()}_${Date.now()}`
          
          paymentResponse = {
            success: true,
            message: type === 'preauth' ? 'Pr√©-autorisation effectu√©e avec succ√®s' : 'Paiement trait√© avec succ√®s',
            details: {
              transactionId,
              amount: cartTotal.value,
              status: type === 'preauth' ? 'authorized' : 'captured',
              captureAmount: type === 'preauth' ? 0 : cartTotal.value
            }
          }

          // Appeler l'API r√©elle si configur√©e
          try {
            const response = await api.createTransaction(orderData)
            if (response.data) {
              paymentResponse.details.transactionId = response.data.id || response.data.transactionId
              paymentResponse.details.status = response.data.status
            }
          } catch (apiError) {
            console.warn('API non disponible, utilisation des donn√©es simul√©es:', apiError)
          }
        }

        paymentResult.value = paymentResponse

        // Si succ√®s, vider le panier
        if (paymentResponse.success) {
          cartStore.clearCart()
        }

      } catch (error) {
        console.error('Erreur lors du paiement:', error)
        paymentResult.value = {
          success: false,
          message: 'Erreur technique lors du paiement',
          details: {
            transactionId: `TXN_ERROR_${Date.now()}`,
            amount: cartTotal.value,
            status: 'error',
            error: error.message
          }
        }
      } finally {
        processingPayment.value = false
      }
    }

    const closePaymentResult = () => {
      paymentResult.value = null
    }

    const viewTransaction = () => {
      if (paymentResult.value?.details?.transactionId) {
        router.push({
          name: 'TransactionManagement',
          query: { highlight: paymentResult.value.details.transactionId }
        })
      }
      closePaymentResult()
    }

    onMounted(() => {
      // Charger le panier depuis le store
      cartStore.loadCart()
    })

    return {
      products,
      cartItems,
      cartTotal,
      customProduct,
      processingPayment,
      paymentResult,
      addToCart,
      updateCartQuantity,
      removeFromCart,
      clearCart,
      addCustomProduct,
      addRandomProduct,
      proceedToCheckout,
      initiatePayment,
      closePaymentResult,
      viewTransaction
    }
  }
}
</script>

<style scoped>
/* Animations pour les transitions */
.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.8s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(20px);
  opacity: 0;
}

/* Scrollbar personnalis√©e */
.overflow-y-auto::-webkit-scrollbar {
  width: 4px;
}

.overflow-y-auto::-webkit-scrollbar-track {
  background: #f1f1f1;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 2px;
}

.overflow-y-auto::-webkit-scrollbar-thumb:hover {
  background: #555;
}
</style>
<template>
  <div class="webhook-page">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 class="text-3xl font-bold text-gray-800 mb-2">üîó Gestion des Webhooks</h1>
          <p class="text-gray-600">R√©ception et gestion des notifications de paiement</p>
        </div>

        <!-- Webhook Configuration -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">‚öôÔ∏è Configuration Webhook</h2>
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">URL Webhook</label>
              <div class="flex gap-2">
                <input
                  v-model="webhookUrl"
                  type="url"
                  class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="http://localhost:8081/webhook"
                />
                <button
                  @click="saveWebhookUrl"
                  class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                >
                  Sauvegarder
                </button>
              </div>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Secret Webhook</label>
              <div class="flex gap-2">
                <input
                  v-model="webhookSecret"
                  type="password"
                  class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="webhook-secret-key"
                />
                <button
                  @click="generateSecret"
                  class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                >
                  G√©n√©rer
                </button>
              </div>
            </div>

            <div class="flex items-center gap-4">
              <label class="flex items-center">
                <input v-model="webhookEnabled" type="checkbox" class="mr-2">
                Activer les webhooks
              </label>
              
              <button
                @click="testWebhook"
                :disabled="!webhookEnabled || isTestingWebhook"
                class="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 disabled:opacity-50 transition-colors"
              >
                {{ isTestingWebhook ? 'Test...' : 'Tester Webhook' }}
              </button>
            </div>
          </div>
        </div>

        <!-- Webhook History -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-gray-800">üì® Historique des Webhooks</h2>
            <div class="flex gap-2">
              <button
                @click="clearWebhooks"
                class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors"
              >
                üóëÔ∏è Vider
              </button>
              <button
                @click="refreshWebhooks"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
              >
                üîÑ Actualiser
              </button>
            </div>
          </div>

          <div v-if="webhooks.length === 0" class="text-center py-12">
            <div class="text-6xl mb-4">üì≠</div>
            <h3 class="text-lg font-semibold text-gray-800 mb-2">Aucun webhook re√ßu</h3>
            <p class="text-gray-600">Les notifications de paiement appara√Ætront ici</p>
          </div>

          <div v-else class="space-y-3">
            <div
              v-for="webhook in webhooks"
              :key="webhook.id"
              class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50"
            >
              <div class="flex justify-between items-start mb-2">
                <div class="flex items-center gap-2">
                  <span :class="getWebhookStatusClass(webhook.status)" class="w-3 h-3 rounded-full"></span>
                  <span class="font-semibold">{{ webhook.event }}</span>
                  <span class="text-sm text-gray-500">{{ formatDate(webhook.timestamp) }}</span>
                </div>
                <button
                  @click="viewWebhook(webhook)"
                  class="text-blue-600 hover:text-blue-800 text-sm"
                >
                  üëÅÔ∏è D√©tails
                </button>
              </div>
              
              <div class="text-sm text-gray-600">
                <p><strong>Transaction ID:</strong> {{ webhook.transactionId }}</p>
                <p><strong>Statut:</strong> {{ webhook.paymentStatus }}</p>
                <p v-if="webhook.amount"><strong>Montant:</strong> {{ formatCurrency(webhook.amount) }}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Webhook Detail Modal -->
        <div v-if="selectedWebhook" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-semibold text-gray-800">D√©tails du Webhook</h3>
              <button @click="selectedWebhook = null" class="text-gray-500 hover:text-gray-700">
                ‚úï
              </button>
            </div>

            <div class="space-y-3">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="text-sm font-medium text-gray-700">Event</label>
                  <p class="font-mono text-sm bg-gray-100 p-2 rounded">{{ selectedWebhook.event }}</p>
                </div>
                <div>
                  <label class="text-sm font-medium text-gray-700">Statut</label>
                  <div class="flex items-center gap-2 mt-1">
                    <span :class="getWebhookStatusClass(selectedWebhook.status)" class="w-3 h-3 rounded-full"></span>
                    <span>{{ selectedWebhook.status }}</span>
                  </div>
                </div>
              </div>

              <div>
                <label class="text-sm font-medium text-gray-700">Payload</label>
                <pre class="mt-2 bg-gray-100 p-3 rounded text-xs overflow-x-auto">{{ JSON.stringify(selectedWebhook.payload, null, 2) }}</pre>
              </div>

              <div v-if="selectedWebhook.headers">
                <label class="text-sm font-medium text-gray-700">Headers</label>
                <pre class="mt-2 bg-gray-100 p-3 rounded text-xs overflow-x-auto">{{ JSON.stringify(selectedWebhook.headers, null, 2) }}</pre>
              </div>
            </div>

            <div class="mt-6 flex gap-2">
              <button
                @click="resendWebhook(selectedWebhook)"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
              >
                üîÑ Renvoyer
              </button>
              <button
                @click="selectedWebhook = null"
                class="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500"
              >
                Fermer
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'

const webhookUrl = ref('http://localhost:8081/webhook')
const webhookSecret = ref('webhook-secret-123')
const webhookEnabled = ref(true)
const isTestingWebhook = ref(false)

const webhooks = ref([])
const selectedWebhook = ref(null)

// Mock webhook data
const mockWebhooks = [
  {
    id: '1',
    event: 'payment.captured',
    transactionId: 'TXN_001',
    paymentStatus: 'captured',
    amount: 299.99,
    timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),
    status: 'success',
    payload: {
      event: 'payment.captured',
      transaction_id: 'TXN_001',
      amount: 299.99,
      currency: 'EUR',
      status: 'captured'
    },
    headers: {
      'Content-Type': 'application/json',
      'X-Webhook-Signature': 'sha256=...'
    }
  },
  {
    id: '2',
    event: 'payment.failed',
    transactionId: 'TXN_002',
    paymentStatus: 'failed',
    amount: 159.99,
    timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(),
    status: 'success',
    payload: {
      event: 'payment.failed',
      transaction_id: 'TXN_002',
      amount: 159.99,
      currency: 'EUR',
      status: 'failed',
      error: 'insufficient_funds'
    },
    headers: {
      'Content-Type': 'application/json',
      'X-Webhook-Signature': 'sha256=...'
    }
  }
]

// Helper functions
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'EUR'
  }).format(amount)
}

const formatDate = (timestamp) => {
  return new Intl.DateTimeFormat('fr-FR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  }).format(new Date(timestamp))
}

const getWebhookStatusClass = (status) => {
  const classes = {
    success: 'bg-green-500',
    failed: 'bg-red-500',
    pending: 'bg-yellow-500'
  }
  return classes[status] || 'bg-gray-500'
}

// Actions
const saveWebhookUrl = () => {
  localStorage.setItem('webhookUrl', webhookUrl.value)
  alert('URL webhook sauvegard√©e !')
}

const generateSecret = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  let result = ''
  for (let i = 0; i < 32; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  webhookSecret.value = result
}

const testWebhook = async () => {
  isTestingWebhook.value = true
  
  try {
    // Simulate webhook test
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    const testWebhook = {
      id: Date.now().toString(),
      event: 'webhook.test',
      transactionId: 'TEST_' + Date.now(),
      paymentStatus: 'test',
      amount: 0,
      timestamp: new Date().toISOString(),
      status: 'success',
      payload: {
        event: 'webhook.test',
        message: 'Test webhook envoy√© avec succ√®s'
      },
      headers: {
        'Content-Type': 'application/json',
        'X-Webhook-Signature': 'sha256=test'
      }
    }
    
    webhooks.value.unshift(testWebhook)
    alert('Webhook de test envoy√© avec succ√®s !')
    
  } finally {
    isTestingWebhook.value = false
  }
}

const clearWebhooks = () => {
  if (confirm('√ätes-vous s√ªr de vouloir vider l\'historique des webhooks ?')) {
    webhooks.value = []
    localStorage.setItem('webhooks', JSON.stringify([]))
  }
}

const refreshWebhooks = () => {
  const saved = localStorage.getItem('webhooks')
  if (saved) {
    webhooks.value = JSON.parse(saved)
  }
}

const viewWebhook = (webhook) => {
  selectedWebhook.value = webhook
}

const resendWebhook = async (webhook) => {
  if (confirm(`Renvoyer le webhook ${webhook.id} ?`)) {
    // Simulate resend
    await new Promise(resolve => setTimeout(resolve, 500))
    alert(`Webhook ${webhook.id} renvoy√© avec succ√®s !`)
    selectedWebhook.value = null
  }
}

// Simulate receiving webhooks
const simulateWebhookReceived = (webhook) => {
  webhooks.value.unshift(webhook)
  localStorage.setItem('webhooks', JSON.stringify(webhooks.value))
}

onMounted(() => {
  // Load saved data
  const savedUrl = localStorage.getItem('webhookUrl')
  if (savedUrl) {
    webhookUrl.value = savedUrl
  }
  
  const savedWebhooks = localStorage.getItem('webhooks')
  if (savedWebhooks) {
    webhooks.value = JSON.parse(savedWebhooks)
  } else {
    webhooks.value = [...mockWebhooks]
  }
})

// Expose function to receive webhooks (for external use)
window.receiveWebhook = simulateWebhookReceived
</script>
<template>
  <div class="transaction-management">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div class="flex justify-between items-center">
            <div>
              <h1 class="text-3xl font-bold text-gray-800 mb-2">üí∞ Gestion des Transactions</h1>
              <p class="text-gray-600">Visualisez et g√©rez toutes les transactions de paiement</p>
            </div>
            <div class="flex gap-3">
              <button
                @click="refreshTransactions"
                :disabled="loading"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
              >
                {{ loading ? 'üîÑ' : 'üîÑ' }} Actualiser
              </button>
              <button
                @click="exportTransactions"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                üì• Exporter
              </button>
            </div>
          </div>
        </div>

        <!-- Filters & Stats -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
          <!-- Filters -->
          <div class="lg:col-span-3 bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-lg font-semibold text-gray-800 mb-4">üîç Filtres</h2>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
                <select
                  v-model="filters.status"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Tous</option>
                  <option value="pending">En attente</option>
                  <option value="authorized">Autoris√©</option>
                  <option value="captured">Captur√©</option>
                  <option value="failed">√âchou√©</option>
                  <option value="refunded">Rembours√©</option>
                  <option value="partially_refunded">Partiellement rembours√©</option>
                </select>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Montant min</label>
                <input
                  v-model.number="filters.minAmount"
                  type="number"
                  step="0.01"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="0.00"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Montant max</label>
                <input
                  v-model.number="filters.maxAmount"
                  type="number"
                  step="0.01"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="9999.99"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Recherche</label>
                <input
                  v-model="filters.search"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ID, description..."
                />
              </div>
            </div>
          </div>

          <!-- Stats -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-lg font-semibold text-gray-800 mb-4">üìä Statistiques</h2>
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-sm text-gray-600">Total transactions:</span>
                <span class="font-medium">{{ stats.total }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-600">Volume total:</span>
                <span class="font-medium">{{ formatCurrency(stats.totalAmount) }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-600">Remboursements:</span>
                <span class="font-medium">{{ formatCurrency(stats.refundedAmount) }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-gray-600">Taux de succ√®s:</span>
                <span class="font-medium text-green-600">{{ stats.successRate }}%</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Transactions Table -->
        <div class="bg-white rounded-lg shadow-lg overflow-hidden">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">üìã Liste des Transactions</h2>
          </div>

          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Transaction
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Montant
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Statut
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <tr
                  v-for="transaction in filteredTransactions"
                  :key="transaction.id"
                  :class="{ 'bg-yellow-50': isHighlighted(transaction.id) }"
                >
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="text-2xl mr-3">{{ getTransactionIcon(transaction.status) }}</div>
                      <div>
                        <div class="text-sm font-medium text-gray-900">{{ transaction.id }}</div>
                        <div class="text-sm text-gray-500">{{ transaction.description || 'Aucune description' }}</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">{{ formatCurrency(transaction.amount) }}</div>
                    <div v-if="transaction.refundedAmount > 0" class="text-sm text-red-600">
                      Rembours√©: {{ formatCurrency(transaction.refundedAmount) }}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span :class="getStatusClass(transaction.status)" class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full">
                      {{ getStatusText(transaction.status) }}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {{ formatDate(transaction.createdAt) }}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div class="flex space-x-2">
                      <button
                        @click="viewTransaction(transaction)"
                        class="text-blue-600 hover:text-blue-900"
                        title="Voir d√©tails"
                      >
                        üëÅÔ∏è
                      </button>
                      <button
                        v-if="canCapture(transaction)"
                        @click="captureTransaction(transaction)"
                        class="text-green-600 hover:text-green-900"
                        title="Capturer"
                      >
                        üí∞
                      </button>
                      <button
                        v-if="canRefund(transaction)"
                        @click="initiateRefund(transaction)"
                        class="text-red-600 hover:text-red-900"
                        title="Rembourser"
                      >
                        üí∏
                      </button>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Empty State -->
          <div v-if="filteredTransactions.length === 0" class="text-center py-12">
            <div class="text-6xl mb-4">üì≠</div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Aucune transaction trouv√©e</h3>
            <p class="text-gray-500">{{ loading ? 'Chargement en cours...' : 'Aucune transaction ne correspond aux crit√®res' }}</p>
          </div>
        </div>

        <!-- Transaction Detail Modal -->
        <div v-if="selectedTransaction" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-screen overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-xl font-semibold text-gray-800">
                {{ getTransactionIcon(selectedTransaction.status) }} D√©tails de la Transaction
              </h3>
              <button
                @click="selectedTransaction = null"
                class="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Basic Info -->
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700">ID Transaction</label>
                  <p class="mt-1 text-sm text-gray-900 font-mono">{{ selectedTransaction.id }}</p>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700">Montant</label>
                  <p class="mt-1 text-lg text-gray-900 font-semibold">{{ formatCurrency(selectedTransaction.amount) }}</p>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700">Statut</label>
                  <span :class="getStatusClass(selectedTransaction.status)" class="mt-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full">
                    {{ getStatusText(selectedTransaction.status) }}
                  </span>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700">Date de cr√©ation</label>
                  <p class="mt-1 text-sm text-gray-900">{{ formatDate(selectedTransaction.createdAt) }}</p>
                </div>
              </div>

              <!-- Additional Info -->
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700">Description</label>
                  <p class="mt-1 text-sm text-gray-900">{{ selectedTransaction.description || 'Aucune description' }}</p>
                </div>

                <div v-if="selectedTransaction.refundedAmount > 0">
                  <label class="block text-sm font-medium text-gray-700">Montant rembours√©</label>
                  <p class="mt-1 text-sm text-red-600 font-semibold">{{ formatCurrency(selectedTransaction.refundedAmount) }}</p>
                </div>

                <div v-if="selectedTransaction.metadata">
                  <label class="block text-sm font-medium text-gray-700">M√©tadonn√©es</label>
                  <pre class="mt-1 text-xs text-gray-900 bg-gray-50 p-2 rounded overflow-x-auto">{{ JSON.stringify(selectedTransaction.metadata, null, 2) }}</pre>
                </div>
              </div>
            </div>

            <!-- Actions -->
            <div class="mt-6 flex justify-end space-x-3">
              <button
                @click="selectedTransaction = null"
                class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors"
              >
                Fermer
              </button>
              <button
                v-if="canCapture(selectedTransaction)"
                @click="captureTransaction(selectedTransaction)"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                üí∞ Capturer
              </button>
              <button
                v-if="canRefund(selectedTransaction)"
                @click="initiateRefund(selectedTransaction)"
                class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors"
              >
                üí∏ Rembourser
              </button>
            </div>
          </div>
        </div>

        <!-- Refund Modal -->
        <div v-if="refundModal.show" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">üí∏ Remboursement</h3>
            
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Transaction ID</label>
                <p class="text-sm text-gray-900 font-mono">{{ refundModal.transaction?.id }}</p>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Montant disponible</label>
                <p class="text-lg text-gray-900 font-semibold">{{ formatCurrency(refundModal.availableAmount) }}</p>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Montant √† rembourser</label>
                <input
                  v-model.number="refundModal.amount"
                  type="number"
                  step="0.01"
                  :max="refundModal.availableAmount"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Raison du remboursement</label>
                <textarea
                  v-model="refundModal.reason"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows="3"
                  placeholder="Raison du remboursement..."
                ></textarea>
              </div>
            </div>

            <div class="mt-6 flex justify-end space-x-3">
              <button
                @click="refundModal.show = false"
                class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors"
              >
                Annuler
              </button>
              <button
                @click="processRefund"
                :disabled="refundModal.processing || refundModal.amount <= 0"
                class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 disabled:opacity-50 transition-colors"
              >
                {{ refundModal.processing ? 'Traitement...' : 'Confirmer le remboursement' }}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, computed, onMounted, watch } from 'vue'
import { useRoute } from 'vue-router'
import { useApi } from '@/services/api'

export default {
  name: 'TransactionManagement',
  setup() {
    const route = useRoute()
    const api = useApi()

    const loading = ref(false)
    const selectedTransaction = ref(null)
    
    const transactions = ref([])
    const filters = reactive({
      status: '',
      minAmount: null,
      maxAmount: null,
      search: ''
    })

    const refundModal = reactive({
      show: false,
      transaction: null,
      amount: 0,
      availableAmount: 0,
      reason: '',
      processing: false
    })

    // Computed properties
    const filteredTransactions = computed(() => {
      return transactions.value.filter(transaction => {
        // Filter by status
        if (filters.status && transaction.status !== filters.status) {
          return false
        }

        // Filter by amount range
        if (filters.minAmount !== null && transaction.amount < filters.minAmount) {
          return false
        }
        if (filters.maxAmount !== null && transaction.amount > filters.maxAmount) {
          return false
        }

        // Filter by search term
        if (filters.search) {
          const searchLower = filters.search.toLowerCase()
          const matchesId = transaction.id.toLowerCase().includes(searchLower)
          const matchesDescription = transaction.description?.toLowerCase().includes(searchLower)
          if (!matchesId && !matchesDescription) {
            return false
          }
        }

        return true
      })
    })

    const stats = computed(() => {
      const total = transactions.value.length
      const totalAmount = transactions.value.reduce((sum, t) => sum + t.amount, 0)
      const refundedAmount = transactions.value.reduce((sum, t) => sum + (t.refundedAmount || 0), 0)
      const successfulTransactions = transactions.value.filter(t => 
        ['authorized', 'captured', 'refunded', 'partially_refunded'].includes(t.status)
      ).length
      const successRate = total > 0 ? Math.round((successfulTransactions / total) * 100) : 0

      return {
        total,
        totalAmount,
        refundedAmount,
        successRate
      }
    })

    // Helper functions
    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(amount)
    }

    const formatDate = (dateString) => {
      return new Date(dateString).toLocaleString('fr-FR')
    }

    const getTransactionIcon = (status) => {
      const icons = {
        pending: '‚è≥',
        authorized: 'üîí',
        captured: '‚úÖ',
        failed: '‚ùå',
        refunded: 'üí∏',
        partially_refunded: 'üîÑ'
      }
      return icons[status] || '‚ùì'
    }

    const getStatusClass = (status) => {
      const classes = {
        pending: 'bg-yellow-100 text-yellow-800',
        authorized: 'bg-blue-100 text-blue-800',
        captured: 'bg-green-100 text-green-800',
        failed: 'bg-red-100 text-red-800',
        refunded: 'bg-purple-100 text-purple-800',
        partially_refunded: 'bg-orange-100 text-orange-800'
      }
      return classes[status] || 'bg-gray-100 text-gray-800'
    }

    const getStatusText = (status) => {
      const texts = {
        pending: 'En attente',
        authorized: 'Autoris√©',
        captured: 'Captur√©',
        failed: '√âchou√©',
        refunded: 'Rembours√©',
        partially_refunded: 'Partiellement rembours√©'
      }
      return texts[status] || status
    }

    const canCapture = (transaction) => {
      return transaction.status === 'authorized'
    }

    const canRefund = (transaction) => {
      return ['captured', 'partially_refunded'].includes(transaction.status) &&
             (transaction.refundedAmount || 0) < transaction.amount
    }

    const isHighlighted = (transactionId) => {
      return route.query.highlight === transactionId
    }

    // Actions
    const refreshTransactions = async () => {
      loading.value = true
      try {
        // Try to load from API
        try {
          const response = await api.transactions.list()
          if (response.success && response.data) {
            transactions.value = response.data
            return
          }
        } catch (apiError) {
          console.warn('API non disponible, chargement des donn√©es de d√©monstration')
        }

        // Fallback to demo data
        await loadDemoTransactions()
      } catch (error) {
        console.error('Erreur lors du chargement des transactions:', error)
      } finally {
        loading.value = false
      }
    }

    const loadDemoTransactions = async () => {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500))

      transactions.value = [
        {
          id: 'TXN_CAPTURED_1234567890',
          amount: 299.99,
          status: 'captured',
          description: 'Achat Casque Audio',
          createdAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
          refundedAmount: 0,
          metadata: { orderType: 'standard', items: 1 }
        },
        {
          id: 'TXN_AUTHORIZED_1234567891',
          amount: 899.99,
          status: 'authorized',
          description: 'Achat Smartphone Pro',
          createdAt: new Date(Date.now() - 1000 * 60 * 60).toISOString(),
          refundedAmount: 0,
          metadata: { orderType: 'preauth', items: 1 }
        },
        {
          id: 'TXN_FAILED_1234567892',
          amount: 1299.99,
          status: 'failed',
          description: 'Achat Ordinateur Portable',
          createdAt: new Date(Date.now() - 1000 * 60 * 90).toISOString(),
          refundedAmount: 0,
          metadata: { orderType: 'fail', error: 'Insufficient funds' }
        },
        {
          id: 'TXN_REFUNDED_1234567893',
          amount: 449.99,
          status: 'refunded',
          description: 'Achat Tablette Graphique',
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
          refundedAmount: 449.99,
          metadata: { orderType: 'standard', refundReason: 'Client insatisfait' }
        },
        {
          id: 'TXN_PARTIAL_1234567894',
          amount: 499.99,
          status: 'partially_refunded',
          description: 'Achat Console de Jeu',
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 3).toISOString(),
          refundedAmount: 100.00,
          metadata: { orderType: 'standard', refundReason: 'Frais de livraison' }
        }
      ]
    }

    const viewTransaction = (transaction) => {
      selectedTransaction.value = transaction
    }

    const captureTransaction = async (transaction) => {
      if (!canCapture(transaction)) return

      try {
        // Try to call API
        try {
          await api.transactions.capture(transaction.id, transaction.amount)
        } catch (apiError) {
          console.warn('API non disponible, simulation de la capture')
        }

        // Update transaction status
        const index = transactions.value.findIndex(t => t.id === transaction.id)
        if (index !== -1) {
          transactions.value[index].status = 'captured'
        }

        // Close modal if open
        if (selectedTransaction.value?.id === transaction.id) {
          selectedTransaction.value.status = 'captured'
        }

      } catch (error) {
        console.error('Erreur lors de la capture:', error)
        alert('Erreur lors de la capture de la transaction')
      }
    }

    const initiateRefund = (transaction) => {
      if (!canRefund(transaction)) return

      const availableAmount = transaction.amount - (transaction.refundedAmount || 0)
      
      refundModal.transaction = transaction
      refundModal.amount = availableAmount
      refundModal.availableAmount = availableAmount
      refundModal.reason = ''
      refundModal.show = true
    }

    const processRefund = async () => {
      if (!refundModal.transaction || refundModal.amount <= 0) return

      refundModal.processing = true

      try {
        // Try to call API
        try {
          await api.transactions.refund(refundModal.transaction.id, refundModal.amount)
        } catch (apiError) {
          console.warn('API non disponible, simulation du remboursement')
        }

        // Update transaction
        const index = transactions.value.findIndex(t => t.id === refundModal.transaction.id)
        if (index !== -1) {
          const transaction = transactions.value[index]
          const newRefundedAmount = (transaction.refundedAmount || 0) + refundModal.amount
          
          transaction.refundedAmount = newRefundedAmount
          
          if (newRefundedAmount >= transaction.amount) {
            transaction.status = 'refunded'
          } else {
            transaction.status = 'partially_refunded'
          }
        }

        // Update selected transaction if open
        if (selectedTransaction.value?.id === refundModal.transaction.id) {
          const newRefundedAmount = (selectedTransaction.value.refundedAmount || 0) + refundModal.amount
          selectedTransaction.value.refundedAmount = newRefundedAmount
          
          if (newRefundedAmount >= selectedTransaction.value.amount) {
            selectedTransaction.value.status = 'refunded'
          } else {
            selectedTransaction.value.status = 'partially_refunded'
          }
        }

        refundModal.show = false

      } catch (error) {
        console.error('Erreur lors du remboursement:', error)
        alert('Erreur lors du remboursement')
      } finally {
        refundModal.processing = false
      }
    }

    const exportTransactions = () => {
      const csvContent = [
        ['ID', 'Montant', 'Statut', 'Description', 'Date', 'Rembours√©'].join(','),
        ...filteredTransactions.value.map(t => [
          t.id,
          t.amount,
          t.status,
          `"${t.description || ''}"`,
          new Date(t.createdAt).toISOString(),
          t.refundedAmount || 0
        ].join(','))
      ].join('\n')

      const blob = new Blob([csvContent], { type: 'text/csv' })
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `transactions_${new Date().toISOString().split('T')[0]}.csv`
      a.click()
      window.URL.revokeObjectURL(url)
    }

    // Watchers
    watch(() => route.query.highlight, (newHighlight) => {
      if (newHighlight) {
        // Scroll to highlighted transaction after a short delay
        setTimeout(() => {
          const element = document.querySelector(`tr.bg-yellow-50`)
          if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' })
          }
        }, 100)
      }
    })

    onMounted(() => {
      refreshTransactions()
    })

    return {
      loading,
      transactions,
      filteredTransactions,
      filters,
      stats,
      selectedTransaction,
      refundModal,
      formatCurrency,
      formatDate,
      getTransactionIcon,
      getStatusClass,
      getStatusText,
      canCapture,
      canRefund,
      isHighlighted,
      refreshTransactions,
      viewTransaction,
      captureTransaction,
      initiateRefund,
      processRefund,
      exportTransactions
    }
  }
}
</script>

<style scoped>
/* Animations pour les modales */
.modal-enter-active, .modal-leave-active {
  transition: opacity 0.3s;
}

.modal-enter-from, .modal-leave-to {
  opacity: 0;
}

/* Highlight animation */
@keyframes highlight {
  0% { background-color: #fef3cd; }
  100% { background-color: transparent; }
}

.highlight-row {
  animation: highlight 2s ease-in-out;
}

/* Table responsive */
@media (max-width: 768px) {
  .table-container {
    overflow-x: auto;
  }
}
</style>
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom styles for the test merchant */
body {
  font-family: 'Inter', sans-serif;
  background-color: #f8fafc;
}

/* Custom button styles */
.btn-primary {
  @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
}

.btn-secondary {
  @apply bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
}

.btn-success {
  @apply bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
}

.btn-danger {
  @apply bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
}

/* Card styles */
.card {
  @apply bg-white rounded-lg shadow-lg p-6;
}

/* Input styles */
.form-input {
  @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
}

.form-label {
  @apply block text-sm font-medium text-gray-700 mb-1;
}

/* Status badges */
.status-success {
  @apply bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium;
}

.status-error {
  @apply bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium;
}

.status-warning {
  @apply bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs font-medium;
}

.status-info {
  @apply bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium;
}

/* Animations */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.8s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(20px);
  opacity: 0;
}

/* Loading spinner */
.spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Table styles */
.table {
  @apply min-w-full divide-y divide-gray-200;
}

.table th {
  @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider bg-gray-50;
}

.table td {
  @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;
}

/* Custom scrollbar */
.custom-scrollbar::-webkit-scrollbar {
  width: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 3px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #555;
}
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom styles for the test merchant */
body {
  font-family: 'Inter', sans-serif;
  background-color: #f8fafc;
}

body {
  font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: #1a202c;
  background-color: #f7fafc;
}

/* Custom Utilities */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

/* Animation Classes */
.fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Button Animations */
.btn-hover {
  transition: all 0.3s ease;
}

.btn-hover:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Card Styles */
.card {
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}

.card:hover {
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Status Colors */
.status-success {
  background-color: #10b981;
  color: white;
}

.status-warning {
  background-color: #f59e0b;
  color: white;
}

.status-error {
  background-color: #ef4444;
  color: white;
}

.status-info {
  background-color: #3b82f6;
  color: white;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #555;
}

/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: 0 0.5rem;
  }
  
  .grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
}

/* Loading Spinner */
.spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 2s linear infinite;
  margin: 20px auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
import axios from 'axios'

// Create API composable
export const useApi = () => {
  // Get stores inside the function to avoid circular imports
  const getStores = () => {
    try {
      const { useCredentialsStore, useTransactionsStore } = require('../stores/index.js')
      return {
        credentialsStore: useCredentialsStore(),
        transactionsStore: useTransactionsStore()
      }
    } catch (error) {
      // Fallback if stores are not available
      return {
        credentialsStore: {
          merchantId: 'test-merchant-123',
          apiKey: 'test-api-key-123',
          backendUrl: 'http://localhost:3000',
          pspUrl: 'http://localhost:3002',
          webhookUrl: 'http://localhost:8081/webhook',
          returnUrl: 'http://localhost:8081/payment-return',
          cancelUrl: 'http://localhost:8081/payment-cancel',
          apiTimeout: 10000
        },
        transactionsStore: {
          addTransaction: () => {},
          updateTransaction: () => {}
        }
      }
    }
  }

  // Configuration axios
  const createApiInstance = (baseUrl) => {
    return axios.create({
      baseURL: baseUrl,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    })
  }

  // Setup interceptors
  const setupInterceptors = (instance, credentials) => {
    instance.interceptors.request.use(
      config => {
        if (credentials.merchantId) {
          config.headers['X-Merchant-ID'] = credentials.merchantId
        }
        if (credentials.apiKey) {
          config.headers['X-API-Key'] = credentials.apiKey
        }
        return config
      },
      error => Promise.reject(error)
    )

    instance.interceptors.response.use(
      response => response,
      error => {
        console.warn('Erreur API:', error.message)
        return Promise.reject(error)
      }
    )
  }

  // API Methods
  const apiMethods = {
    // Health Check
    async healthCheck() {
      try {
        const { credentialsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        const response = await api.get('/health')
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // PSP Health Check
    async pspHealthCheck() {
      try {
        const { credentialsStore } = getStores()
        const pspApi = createApiInstance(credentialsStore.pspUrl)
        setupInterceptors(pspApi, credentialsStore)
        const response = await pspApi.get('/health')
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // Create Transaction
    async createTransaction(orderData) {
      try {
        const { credentialsStore, transactionsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)

        const transactionPayload = {
          merchant_id: credentialsStore.merchantId,
          amount: orderData.amount,
          currency: orderData.currency || 'EUR',
          description: orderData.description,
          return_url: credentialsStore.returnUrl,
          cancel_url: credentialsStore.cancelUrl,
          webhook_url: credentialsStore.webhookUrl,
          metadata: {
            ...orderData.metadata,
            items: orderData.items,
            source: 'test-merchant'
          }
        }

        const response = await api.post('/transactions', transactionPayload)
        
        // Store transaction locally
        const transaction = {
          id: response.data.id || response.data.transaction_id,
          amount: orderData.amount,
          currency: orderData.currency || 'EUR',
          status: response.data.status || 'pending',
          type: orderData.metadata?.orderType || 'standard',
          items: orderData.items,
          metadata: orderData.metadata,
          timestamp: new Date().toISOString()
        }
        
        transactionsStore.addTransaction(transaction)
        
        return { success: true, data: response.data }
      } catch (error) {
        console.error('Transaction creation failed:', error)
        return { success: false, error: error.message }
      }
    },

    // Get Transaction
    async getTransaction(transactionId) {
      try {
        const { credentialsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        const response = await api.get(`/transactions/${transactionId}`)
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // Capture Transaction
    async captureTransaction(transactionId, amount = null) {
      try {
        const { credentialsStore, transactionsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        
        const payload = amount ? { amount } : {}
        const response = await api.post(`/transactions/${transactionId}/capture`, payload)
        
        // Update local transaction
        transactionsStore.updateTransaction(transactionId, {
          status: 'captured',
          captureDate: new Date().toISOString(),
          captureAmount: amount
        })
        
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // Refund Transaction
    async refundTransaction(transactionId, amount = null) {
      try {
        const { credentialsStore, transactionsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        
        const payload = amount ? { amount } : {}
        const response = await api.post(`/transactions/${transactionId}/refund`, payload)
        
        // Update local transaction
        transactionsStore.updateTransaction(transactionId, {
          status: 'refunded',
          refundDate: new Date().toISOString(),
          refundAmount: amount
        })
        
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // Cancel Transaction
    async cancelTransaction(transactionId) {
      try {
        const { credentialsStore, transactionsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        
        const response = await api.post(`/transactions/${transactionId}/cancel`)
        
        // Update local transaction
        transactionsStore.updateTransaction(transactionId, {
          status: 'cancelled',
          cancelDate: new Date().toISOString()
        })
        
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // Get Transactions List
    async getTransactions(filters = {}) {
      try {
        const { credentialsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        
        const params = new URLSearchParams()
        if (filters.status) params.append('status', filters.status)
        if (filters.limit) params.append('limit', filters.limit)
        if (filters.offset) params.append('offset', filters.offset)
        
        const response = await api.get(`/transactions?${params}`)
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    },

    // Test Webhook
    async testWebhook() {
      try {
        const { credentialsStore } = getStores()
        const api = createApiInstance(credentialsStore.backendUrl)
        setupInterceptors(api, credentialsStore)
        
        const response = await api.post('/webhooks/test', {
          webhook_url: credentialsStore.webhookUrl,
          event: 'webhook.test',
          data: {
            message: 'Test webhook',
            timestamp: new Date().toISOString()
          }
        })
        return { success: true, data: response.data }
      } catch (error) {
        return { success: false, error: error.message }
      }
    }
  }

  return apiMethods
}
import axios from 'axios'

// Default configuration for fallback
const defaultConfig = {
  merchantId: 'test-merchant-123',
  apiKey: 'test-api-key-123',
  backendUrl: 'http://localhost:3000',
  pspUrl: 'http://localhost:3002',
  webhookUrl: 'http://localhost:8081/webhook',
  returnUrl: 'http://localhost:8081/payment-return',
  cancelUrl: 'http://localhost:8081/payment-cancel',
  apiTimeout: 10000
}

// Create API composable
export const useApi = () => {
  // Get stores function - will be called when needed
  let credentialsStore = null
  let transactionsStore = null

  const getStores = async () => {
    if (!credentialsStore || !transactionsStore) {
      try {
        // Dynamic import to avoid circular dependencies
        const storesModule = await import('../stores/index.js')
        credentialsStore = storesModule.useCredentialsStore()
        transactionsStore = storesModule.useTransactionsStore()
      } catch (error) {
        console.warn('Could not load stores, using defaults:', error)
        credentialsStore = defaultConfig
        transactionsStore = {
          addTransaction: () => console.log('Mock addTransaction'),
          updateTransaction: () => console.log('Mock updateTransaction')
        }
      }
    }
    return { credentialsStore, transactionsStore }
  }

  // Configuration axios
  const createApiInstance = (baseUrl) => {
    return axios.create({
      baseURL: baseUrl,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    })
  }

  // Setup interceptors
  const setupInterceptors = (instance, credentials) => {
    instance.interceptors.request.use(
      config => {
        if (credentials.merchantId) {
          config.headers['X-Merchant-ID'] = credentials.merchantId
        }
        if (credentials.apiKey) {
          config.headers['X-API-Key'] = credentials.apiKey
        }
        return config
      },
      error => Promise.reject(error)
    )

    instance.interceptors.response.use(
      response => response,
      error => {
        console.warn('Erreur API:', error.message)
        return Promise.reject(error)
      }
    )
  }

  // API Methods
  return {
    // Health Check methods
    health: {
      async checkBackend() {
        try {
          const { credentialsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          const response = await api.get('/health')
          return { status: 'ok', data: response.data }
        } catch (error) {
          return { status: 'error', error: error.message }
        }
      },

      async checkPSP() {
        try {
          const { credentialsStore } = await getStores()
          const pspApi = createApiInstance(credentialsStore.pspUrl || defaultConfig.pspUrl)
          setupInterceptors(pspApi, credentialsStore)
          const response = await pspApi.get('/health')
          return { status: 'ok', data: response.data }
        } catch (error) {
          return { status: 'error', error: error.message }
        }
      }
    },

    // Transaction methods
    transactions: {
      async create(orderData) {
        try {
          const { credentialsStore, transactionsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          
          const payload = {
            ...orderData,
            merchantId: credentialsStore.merchantId || defaultConfig.merchantId,
            returnUrl: credentialsStore.returnUrl || defaultConfig.returnUrl,
            cancelUrl: credentialsStore.cancelUrl || defaultConfig.cancelUrl,
            webhookUrl: credentialsStore.webhookUrl || defaultConfig.webhookUrl
          }
          
          const response = await api.post('/transactions', payload)
          
          // Store transaction locally
          if (transactionsStore.addTransaction) {
            transactionsStore.addTransaction({
              id: response.data.transactionId,
              status: 'pending',
              amount: orderData.amount,
              currency: orderData.currency,
              createdAt: new Date().toISOString(),
              ...response.data
            })
          }
          
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      },

      async get(transactionId) {
        try {
          const { credentialsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          const response = await api.get(`/transactions/${transactionId}`)
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      },

      async capture(transactionId, amount = null) {
        try {
          const { credentialsStore, transactionsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          
          const payload = amount ? { amount } : {}
          const response = await api.post(`/transactions/${transactionId}/capture`, payload)
          
          // Update local transaction
          if (transactionsStore.updateTransaction) {
            transactionsStore.updateTransaction(transactionId, {
              status: 'captured',
              capturedAmount: amount || response.data.amount,
              captureDate: new Date().toISOString()
            })
          }
          
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      },

      async refund(transactionId, amount = null) {
        try {
          const { credentialsStore, transactionsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          
          const payload = amount ? { amount } : {}
          const response = await api.post(`/transactions/${transactionId}/refund`, payload)
          
          // Update local transaction
          if (transactionsStore.updateTransaction) {
            transactionsStore.updateTransaction(transactionId, {
              status: 'refunded',
              refundedAmount: amount || response.data.amount,
              refundDate: new Date().toISOString()
            })
          }
          
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      },

      async cancel(transactionId) {
        try {
          const { credentialsStore, transactionsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          
          const response = await api.post(`/transactions/${transactionId}/cancel`)
          
          // Update local transaction
          if (transactionsStore.updateTransaction) {
            transactionsStore.updateTransaction(transactionId, {
              status: 'cancelled',
              cancelDate: new Date().toISOString()
            })
          }
          
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      },

      async list(filters = {}) {
        try {
          const { credentialsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          
          const params = new URLSearchParams()
          if (filters.status) params.append('status', filters.status)
          if (filters.limit) params.append('limit', filters.limit)
          if (filters.offset) params.append('offset', filters.offset)
          
          const response = await api.get(`/transactions?${params}`)
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      }
    },

    // Webhook methods
    webhooks: {
      async test() {
        try {
          const { credentialsStore } = await getStores()
          const api = createApiInstance(credentialsStore.backendUrl || defaultConfig.backendUrl)
          setupInterceptors(api, credentialsStore)
          
          const payload = {
            webhookUrl: credentialsStore.webhookUrl || defaultConfig.webhookUrl,
            eventType: 'test',
            data: { test: true, timestamp: new Date().toISOString() }
          }
          
          const response = await api.post('/webhooks/test', payload)
          return { success: true, data: response.data }
        } catch (error) {
          return { success: false, error: error.message }
        }
      }
    }
  }
}

// Default export for backward compatibility
export default useApi
import { createRouter, createWebHistory } from 'vue-router'

// Pages
import Home from '../views/Home.vue'
import CredentialsConfig from '../views/CredentialsConfig.vue'
import ConfigurationComplete from '../views/ConfigurationComplete.vue'
import Shop from '../views/Shop.vue'
import Cart from '../views/Cart.vue'
import CartManagement from '../views/CartManagement.vue'
import TransactionManagement from '../views/TransactionManagement.vue'
import TransactionsComplete from '../views/TransactionsComplete.vue'
import WebhookManagement from '../views/WebhookManagement.vue'
import PaymentReturn from '../views/PaymentReturn.vue'
import PaymentCancel from '../views/PaymentCancel.vue'

const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/config',
    name: 'CredentialsConfig',
    component: CredentialsConfig
  },
  {
    path: '/configuration',
    name: 'ConfigurationComplete',
    component: ConfigurationComplete
  },
  {
    path: '/shop',
    name: 'Shop',
    component: Shop
  },
  {
    path: '/cart',
    name: 'Cart',
    component: Cart
  },
  {
    path: '/cart-management',
    name: 'CartManagement',
    component: CartManagement
  },
  {
    path: '/transactions',
    name: 'TransactionManagement',
    component: TransactionManagement
  },
  {
    path: '/transactions-complete',
    name: 'TransactionsComplete',
    component: TransactionsComplete
  },
  {
    path: '/webhooks',
    name: 'WebhookManagement',
    component: WebhookManagement
  },
  {
    path: '/payment-return',
    name: 'PaymentReturn',
    component: PaymentReturn
  },
  {
    path: '/payment-cancel',
    name: 'PaymentCancel',
    component: PaymentCancel
  },
  {
    path: '/webhook',
    name: 'WebhookEndpoint',
    component: WebhookManagement
  },
  // Redirections pour compatibilit√©
  {
    path: '/credentials',
    redirect: '/config'
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
