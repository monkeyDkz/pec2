### ===============================
### TESTS COMPLETS - WORKFLOW VALIDATION ADMIN
### ===============================
### Ce fichier teste TOUS les workflows de la plateforme

### ===============================
### 1. TESTS DE BASE
### ===============================

### 1.1 Test sant√© du serveur
GET http://localhost:3000/health

### 1.2 Test routes auth
GET http://localhost:3000/api/auth/test

### ===============================
### 2. AUTHENTIFICATION - OBTENIR LES TOKENS
### ===============================

### 2.1 Connexion Admin
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "admin@payment-platform.com",
  "password": "AdminPassword123!"
}

### 2.2 Connexion Merchant 1 (Jean Dupont - TechShop)
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "merchant1@example.com",
  "password": "MerchantPass123!"
}

### 2.3 Connexion Merchant 2 (Marie Martin - CloudService)
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "merchant2@example.com",
  "password": "MerchantPass123!"
}

### 2.4 Connexion New User (Pierre Durand - Pour tests)
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "newuser@example.com",
  "password": "UserPass123!"
}

### Variables JWT (√Ä REMPLACER avec les vrais tokens obtenus ci-dessus)
@admin_token = TOKEN_ADMIN_ICI
@merchant1_token = TOKEN_MERCHANT1_ICI
@merchant2_token = TOKEN_MERCHANT2_ICI
@newuser_token = TOKEN_NEWUSER_ICI

### ===============================
### 3. WORKFLOW 1 : DEMANDE DE CR√âATION DE MARCHAND
### ===============================

### 3.1 Pierre fait une demande de cr√©ation de marchand
POST http://localhost:3000/api/merchants/create-request
Authorization: Bearer {{newuser_token}}
Content-Type: application/json

{
  "name": "Pierre's Gaming Store",
  "description": "Boutique en ligne sp√©cialis√©e dans les jeux vid√©o et accessoires gaming",
  "website_url": "https://pierres-gaming-store.com",
  "business_type": "e-commerce",
  "company_name": "Gaming Store SARL",
  "company_address": "456 Rue des Gamers, 69000 Lyon, France",
  "company_phone": "+33 4 78 90 12 34",
  "company_email": "contact@pierres-gaming-store.com",
  "siret": "78901234567890",
  "webhook_url": "https://pierres-gaming-store.com/api/webhooks/payment"
}

### 3.2 Admin v√©rifie les nouvelles demandes
GET http://localhost:3000/api/admin/merchant-requests
Authorization: Bearer {{admin_token}}

### 3.3 Admin v√©rifie le d√©tail d'une demande sp√©cifique (remplacer ID)
GET http://localhost:3000/api/admin/merchant-requests/ID_DEMANDE_ICI
Authorization: Bearer {{admin_token}}

### 3.4 Admin APPROUVE la demande de cr√©ation (remplacer ID)
POST http://localhost:3000/api/admin/merchant-requests/ID_DEMANDE_ICI/approve
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "notes": "Demande approuv√©e - documents v√©rifi√©s, entreprise valide"
}

### 3.5 V√©rifier que le marchand a √©t√© cr√©√©
GET http://localhost:3000/api/admin/merchants
Authorization: Bearer {{admin_token}}

### ===============================
### 4. WORKFLOW 2 : DEMANDE D'ADH√âSION √Ä UN MARCHAND
### ===============================

### 4.1 Cr√©er un nouvel utilisateur pour test d'adh√©sion
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "firstName": "Sophie",
  "lastName": "D√©veloppeuse",
  "email": "sophie.dev@example.com",
  "password": "SophiePassword123!"
}

### 4.2 Connexion du nouvel utilisateur
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "sophie.dev@example.com",
  "password": "SophiePassword123!"
}

### Variable pour Sophie
@sophie_token = TOKEN_SOPHIE_ICI

### 4.3 Sophie consulte les marchands disponibles
GET http://localhost:3000/api/merchants/available
Authorization: Bearer {{sophie_token}}

### 4.4 Sophie fait une demande pour rejoindre TechShop
POST http://localhost:3000/api/merchants/join-request
Authorization: Bearer {{sophie_token}}
Content-Type: application/json

{
  "merchantId": "5a008fce-727d-4a9e-8b13-c26fbaad66e2",
  "requestedRole": "developer",
  "justification": "Je suis d√©veloppeuse full-stack avec 5 ans d'exp√©rience en e-commerce. Je ma√Ætrise les APIs de paiement et souhaite contribuer au d√©veloppement de TechShop."
}

### 4.5 Admin voit la nouvelle demande d'adh√©sion
GET http://localhost:3000/api/admin/merchant-requests?status=pending
Authorization: Bearer {{admin_token}}

### 4.6 Admin APPROUVE la demande d'adh√©sion (remplacer ID)
POST http://localhost:3000/api/admin/merchant-requests/ID_DEMANDE_ADHESION_ICI/approve
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "notes": "Profil d√©veloppeur valid√©, exp√©rience pertinente confirm√©e"
}

### ===============================
### 5. WORKFLOW 3 : GESTION POST-VALIDATION
### ===============================

### 5.1 Pierre v√©rifie ses marchands apr√®s validation
GET http://localhost:3000/api/merchants
Authorization: Bearer {{newuser_token}}

### 5.2 Sophie v√©rifie ses marchands apr√®s adh√©sion
GET http://localhost:3000/api/merchants
Authorization: Bearer {{sophie_token}}

### 5.3 Jean (admin TechShop) voit les nouveaux membres
GET http://localhost:3000/api/merchants/5a008fce-727d-4a9e-8b13-c26fbaad66e2/members
Authorization: Bearer {{merchant1_token}}

### 5.4 Sophie acc√®de aux d√©tails de TechShop
GET http://localhost:3000/api/merchants/5a008fce-727d-4a9e-8b13-c26fbaad66e2/details
Authorization: Bearer {{sophie_token}}

### ===============================
### 6. WORKFLOW 4 : TESTS DE REJET
### ===============================

### 6.1 Cr√©er un utilisateur pour test de rejet
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "firstName": "Malveillant",
  "lastName": "Utilisateur",
  "email": "malveillant@example.com",
  "password": "MalveillantPass123!"
}

### 6.2 Connexion utilisateur malveillant
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "malveillant@example.com",
  "password": "MalveillantPass123!"
}

### Variable malveillant
@malveillant_token = TOKEN_MALVEILLANT_ICI

### 6.3 Demande de cr√©ation douteuse
POST http://localhost:3000/api/merchants/create-request
Authorization: Bearer {{malveillant_token}}
Content-Type: application/json

{
  "name": "Site Douteux",
  "description": "Activit√© non claire",
  "website_url": "https://site-douteux.com",
  "business_type": "other",
  "company_name": "Soci√©t√© Fictive",
  "company_address": "Adresse incompl√®te",
  "company_phone": "0123456789",
  "company_email": "fake@fake.com",
  "siret": "00000000000000",
  "webhook_url": "https://site-douteux.com/webhook"
}

### 6.4 Admin REJETTE la demande douteuse (remplacer ID)
POST http://localhost:3000/api/admin/merchant-requests/ID_DEMANDE_DOUTEUSE_ICI/reject
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "reason": "Informations incompl√®tes et non v√©rifiables",
  "notes": "SIRET invalide, adresse incompl√®te, activit√© non claire"
}

### ===============================
### 7. TESTS DE S√âCURIT√â ET PERMISSIONS
### ===============================

### 7.1 Tentative d'acc√®s admin avec token merchant (DOIT √âCHOUER)
GET http://localhost:3000/api/admin/merchants
Authorization: Bearer {{merchant1_token}}

### 7.2 Tentative d'acc√®s marchand sans autorisation (DOIT √âCHOUER)
GET http://localhost:3000/api/merchants/e63467c4-6414-4876-8e4a-9dbc23ae3141/details
Authorization: Bearer {{merchant1_token}}

### 7.3 Tentative de modification de marchand par developer (DOIT √âCHOUER)
PUT http://localhost:3000/api/merchants/5a008fce-727d-4a9e-8b13-c26fbaad66e2/settings
Authorization: Bearer {{sophie_token}}
Content-Type: application/json

{
  "webhook_url": "https://hack-attempt.com"
}

### ===============================
### 8. TESTS DE GESTION AVANC√âE
### ===============================

### 8.1 Admin consulte tous les utilisateurs
GET http://localhost:3000/api/admin/users
Authorization: Bearer {{admin_token}}

### 8.2 Admin suspend un marchand
POST http://localhost:3000/api/admin/merchants/ID_MARCHAND_ICI/suspend
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "reason": "Activit√© suspecte d√©tect√©e",
  "notes": "Suspension temporaire pour v√©rification"
}

### 8.3 Admin r√©active un marchand
POST http://localhost:3000/api/admin/merchants/ID_MARCHAND_ICI/activate
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "notes": "V√©rifications termin√©es, r√©activation autoris√©e"
}

### ===============================
### 9. TESTS DE CONSULTATION ET STATISTIQUES
### ===============================

### 9.1 Pierre consulte ses demandes
GET http://localhost:3000/api/merchants/my-requests
Authorization: Bearer {{newuser_token}}

### 9.2 Admin consulte le d√©tail d'un marchand
GET http://localhost:3000/api/admin/merchants/5a008fce-727d-4a9e-8b13-c26fbaad66e2
Authorization: Bearer {{admin_token}}

### 9.3 Consultation du profil utilisateur
GET http://localhost:3000/api/auth/profile
Authorization: Bearer {{sophie_token}}

### ===============================
### 10. TESTS D'ERREURS ET EDGE CASES
### ===============================

### 10.1 Demande avec donn√©es manquantes (DOIT √âCHOUER)
POST http://localhost:3000/api/merchants/create-request
Authorization: Bearer {{newuser_token}}
Content-Type: application/json

{
  "name": "Marchand Incomplet"
}

### 10.2 Adh√©sion √† marchand inexistant (DOIT √âCHOUER)
POST http://localhost:3000/api/merchants/join-request
Authorization: Bearer {{sophie_token}}
Content-Type: application/json

{
  "merchantId": "00000000-0000-0000-0000-000000000000",
  "requestedRole": "developer",
  "justification": "Test"
}

### 10.3 Acc√®s sans token (DOIT √âCHOUER)
GET http://localhost:3000/api/merchants

### ===============================
### üéØ INSTRUCTIONS D'UTILISATION
### ===============================
### 1. Ex√©cuter les connexions (section 2) pour obtenir les tokens
### 2. Remplacer les variables @token par les vrais tokens
### 3. Ex√©cuter les workflows dans l'ordre
### 4. V√©rifier les r√©ponses et ajuster les IDs selon les retours
### 5. Tester tous les cas d'erreur pour valider la s√©curit√©

### 13. Faire une demande d'adh√©sion √† un marchand (NewUser)
POST http://localhost:3000/api/merchants/e63467c4-6414-4876-8e4a-9dbc23ae3141/request-join
Authorization: Bearer {{newuser_token}}
Content-Type: application/json

{
  "requested_role": "developer",
  "justification": "Je souhaite rejoindre CloudService Pro en tant que d√©veloppeur. J'ai une forte exp√©rience en int√©gration de syst√®mes de paiement."
}

### 14. Lister les membres d'un marchand (Merchant2 - CloudService Pro)
GET http://localhost:3000/api/merchants/e63467c4-6414-4876-8e4a-9dbc23ae3141/members
Authorization: Bearer {{merchant2_token}}

### 15. Obtenir le profil utilisateur (route prot√©g√©e)
GET http://localhost:3000/api/auth/profile
Authorization: Bearer {{merchant1_token}}

### ===============================
### GESTION DES DEMANDES (Admin)
### ===============================

### 16. Approuver une demande d'adh√©sion (Admin)
POST http://localhost:3000/api/admin/requests/241d73cd-80d3-4a67-a92c-0c94d40b4ce3/approve
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "notes": "Demande approuv√©e, profil compatible avec les besoins"
}

### 17. Lister les utilisateurs (Admin)
GET http://localhost:3000/api/admin/users
Authorization: Bearer {{admin_token}}

### ===============================
### TESTS D'ERREURS ET S√âCURIT√â
### ===============================

### 18. Tentative d'acc√®s admin sans token admin (doit √©chouer)
GET http://localhost:3000/api/admin/merchants
Authorization: Bearer {{merchant1_token}}

### 19. Tentative d'acc√®s √† un marchand non autoris√© (doit √©chouer)
GET http://localhost:3000/api/merchants/e63467c4-6414-4876-8e4a-9dbc23ae3141
Authorization: Bearer {{merchant1_token}}

### 20. Test route inexistante
GET http://localhost:3000/api/inexistant
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "firstName": "Kays",
  "lastName": "Zahidi",
  "email": "kays.zahidi@gmail.com",
  "password": "TestPassword123"
}

### Connexion avec l'utilisateur r√©el
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "kays.zahidi@gmail.com",
  "password": "TestPassword123"
}

### Test d'inscription avec donn√©es invalides (mot de passe trop court)
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "firstName": "Test",
  "lastName": "User",
  "email": "test@example.com",
  "password": "123"
}

### Test d'inscription avec email invalide
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "firstName": "Test",
  "lastName": "User",
  "email": "email-invalide",
  "password": "TestPassword123"
}

### Test de connexion avec mauvais identifiants
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "john@example.com",
  "password": "mauvais_mot_de_passe"
}

### Test de route prot√©g√©e sans token
GET http://localhost:3000/api/auth/profile

### Test avec token invalide
GET http://localhost:3000/api/auth/profile
Authorization: Bearer token_invalide_123

### ===============================
### 10. TESTS API PAIEMENT - TRANSACTIONS
### ===============================

### 10.1 Variables pour les tests
@admin_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5MWZlNzIyMS0wODliLTQ1NzItODNjZC0yMzE5M2MzYmI4YjIiLCJpYXQiOjE3MjE0MDEwNjYsImV4cCI6MTcyMTQ4NzQ2Nn0.xyz
@merchant1_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5MWZlNzIyMS0wODliLTQ1NzItODNjZC0yMzE5M2MzYmI4YjIiLCJpYXQiOjE3MjE0MDEwNjYsImV4cCI6MTcyMTQ4NzQ2Nn0.xyz

### IMPORTANT: R√©cup√©rer les credentials API d'un marchand actif
GET http://localhost:3000/api/merchants/my-merchants
Authorization: Bearer {{merchant1_token}}

### Variables API Key (√† remplacer par les vraies valeurs)
@api_id = MERCHANT_APP_ID_HERE
@api_secret = MERCHANT_APP_SECRET_HERE

### ===============================
### 10.2 CR√âATION DE TRANSACTIONS
### ===============================

### Cr√©er une transaction valide
POST http://localhost:3000/api/transactions
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "order_id": "ORDER_2025_001",
  "amount": 99.99,
  "currency": "EUR",
  "description": "Achat produit test",
  "customer_email": "client@example.com",
  "customer_first_name": "Jean",
  "customer_last_name": "Client",
  "billing_address": {
    "street": "123 rue de la Paix",
    "city": "Paris",
    "postal_code": "75001",
    "country": "FR"
  },
  "success_url": "https://merchant-site.com/success",
  "cancel_url": "https://merchant-site.com/cancel",
  "webhook_url": "https://merchant-site.com/webhook",
  "metadata": {
    "order_type": "test",
    "campaign_id": "SUMMER2025"
  }
}

### Cr√©er une transaction minimale
POST http://localhost:3000/api/transactions
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "order_id": "ORDER_2025_002",
  "amount": 25.50,
  "customer_email": "simple@example.com",
  "success_url": "https://merchant-site.com/success",
  "cancel_url": "https://merchant-site.com/cancel"
}

### Test transaction avec donn√©es invalides (montant n√©gatif)
POST http://localhost:3000/api/transactions
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "order_id": "ORDER_INVALID",
  "amount": -10.00,
  "customer_email": "invalid@example.com",
  "success_url": "https://merchant-site.com/success",
  "cancel_url": "https://merchant-site.com/cancel"
}

### Test sans credentials API
POST http://localhost:3000/api/transactions
Content-Type: application/json

{
  "order_id": "ORDER_NO_AUTH",
  "amount": 50.00,
  "customer_email": "noauth@example.com",
  "success_url": "https://merchant-site.com/success",
  "cancel_url": "https://merchant-site.com/cancel"
}

### ===============================
### 10.3 CONSULTATION DES TRANSACTIONS
### ===============================

### Variables transaction (√† remplacer par un vrai ID)
@transaction_id = TRANSACTION_ID_HERE

### Obtenir une transaction sp√©cifique
GET http://localhost:3000/api/transactions/{{transaction_id}}
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Lister toutes les transactions du marchand
GET http://localhost:3000/api/transactions
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Lister avec filtres
GET http://localhost:3000/api/transactions?status=pending&page=1&limit=10
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### ===============================
### 10.4 TRAITEMENT DE PAIEMENT (PAGE DE PAIEMENT)
### ===============================

### Variables pour paiement (√† r√©cup√©rer depuis la transaction cr√©√©e)
@payment_token = PAYMENT_TOKEN_HERE

### Traiter un paiement par carte
POST http://localhost:3000/api/transactions/{{transaction_id}}/process
Content-Type: application/json

{
  "token": "{{payment_token}}",
  "payment_method": {
    "type": "card",
    "card_number": "4111111111111111",
    "expiry_month": 12,
    "expiry_year": 2027,
    "cvv": "123",
    "cardholder_name": "Jean Client"
  }
}

### Annuler une transaction
POST http://localhost:3000/api/transactions/{{transaction_id}}/cancel
Content-Type: application/json

{
  "token": "{{payment_token}}"
}

### Test paiement avec token invalide
POST http://localhost:3000/api/transactions/{{transaction_id}}/process
Content-Type: application/json

{
  "token": "invalid_token",
  "payment_method": {
    "type": "card",
    "card_number": "4111111111111111",
    "expiry_month": 12,
    "expiry_year": 2027,
    "cvv": "123",
    "cardholder_name": "Jean Client"
  }
}

### ===============================
### 10.5 OP√âRATIONS - REMBOURSEMENTS
### ===============================

### Variables operation (r√©cup√©r√©e depuis une transaction pay√©e)
@paid_transaction_id = PAID_TRANSACTION_ID_HERE

### Remboursement total
POST http://localhost:3000/api/transactions/{{paid_transaction_id}}/refund
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "reason": "Remboursement total demand√© par le client",
  "metadata": {
    "refund_type": "customer_request",
    "support_ticket": "TICKET_001"
  }
}

### Remboursement partiel
POST http://localhost:3000/api/transactions/{{paid_transaction_id}}/refund
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "amount": 25.00,
  "reason": "Remboursement partiel - article d√©fectueux",
  "metadata": {
    "refund_type": "partial",
    "item_id": "ITEM_123"
  }
}

### Lister toutes les op√©rations
GET http://localhost:3000/api/operations
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Lister les op√©rations d'une transaction
GET http://localhost:3000/api/transactions/{{transaction_id}}/operations
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Obtenir les stats des op√©rations
GET http://localhost:3000/api/operations/stats/summary
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### ===============================
### 10.6 WEBHOOKS - GESTION
### ===============================

### Lister les webhooks du marchand
GET http://localhost:3000/api/webhooks
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Lister avec filtres
GET http://localhost:3000/api/webhooks?status=pending&event_type=transaction.success
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Variables webhook (√† remplacer par un vrai ID)
@webhook_id = WEBHOOK_ID_HERE

### R√©essayer un webhook
POST http://localhost:3000/api/webhooks/{{webhook_id}}/retry
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### Obtenir les stats des webhooks
GET http://localhost:3000/api/webhooks/stats/summary
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

### ===============================
### 10.7 SIMULATION PSP WEBHOOK (√Ä TESTER MANUELLEMENT)
### ===============================

### Simuler une notification PSP (success)
POST http://localhost:3000/api/webhooks/psp
Content-Type: application/json
X-PSP-Signature: CALCULATED_SIGNATURE_HERE

{
  "operation_id": "{{operation_id}}",
  "transaction_id": "{{transaction_id}}",
  "status": "success",
  "psp_reference": "PSP_REF_123456",
  "psp_transaction_id": "TXN_PSP_789",
  "data": {
    "card_last4": "1111",
    "authorization_code": "AUTH123",
    "processor_response": "APPROVED"
  }
}

### Simuler une notification PSP (failed)
POST http://localhost:3000/api/webhooks/psp
Content-Type: application/json
X-PSP-Signature: CALCULATED_SIGNATURE_HERE

{
  "operation_id": "{{operation_id}}",
  "transaction_id": "{{transaction_id}}",
  "status": "failed",
  "error_message": "Insufficient funds",
  "error_code": "INSUFFICIENT_FUNDS",
  "data": {
    "decline_reason": "Insufficient funds"
  }
}

### ===============================
### 10.8 BACKOFFICE - INTERFACE ADMIN
### ===============================

### Lister toutes les transactions (admin)
GET http://localhost:3000/api/transactions/backoffice/list
Authorization: Bearer {{admin_token}}

### Voir une transaction (admin)
GET http://localhost:3000/api/transactions/backoffice/{{transaction_id}}
Authorization: Bearer {{admin_token}}

### R√©essayer tous les webhooks en √©chec (admin)
POST http://localhost:3000/api/webhooks/backoffice/retry-failed
Authorization: Bearer {{admin_token}}

### ===============================
### 10.9 TESTS DE S√âCURIT√â - API PAIEMENT
### ===============================

### Test avec mauvaise API Key
GET http://localhost:3000/api/transactions
X-API-ID: INVALID_APP_ID
X-API-SECRET: INVALID_SECRET

### Test sans headers d'authentification
GET http://localhost:3000/api/transactions

### Test acc√®s transaction d'un autre marchand
GET http://localhost:3000/api/transactions/{{transaction_id}}
X-API-ID: OTHER_MERCHANT_APP_ID
X-API-SECRET: OTHER_MERCHANT_SECRET

### ===============================
### 10.10 TESTS DE EDGE CASES
### ===============================

### Traiter paiement sur transaction expir√©e
POST http://localhost:3000/api/transactions/{{transaction_id}}/process
Content-Type: application/json

{
  "token": "{{payment_token}}",
  "payment_method": {
    "type": "card",
    "card_number": "4111111111111111",
    "expiry_month": 12,
    "expiry_year": 2027,
    "cvv": "123",
    "cardholder_name": "Jean Client"
  }
}

### Remboursement sur transaction non pay√©e
POST http://localhost:3000/api/transactions/{{transaction_id}}/refund
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "reason": "Test remboursement invalide"
}

### Remboursement d√©passant le montant disponible
POST http://localhost:3000/api/transactions/{{paid_transaction_id}}/refund
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "amount": 999999.99,
  "reason": "Test montant excessif"
}

### Double remboursement total
POST http://localhost:3000/api/transactions/{{paid_transaction_id}}/refund
Content-Type: application/json
X-API-ID: {{api_id}}
X-API-SECRET: {{api_secret}}

{
  "reason": "Deuxi√®me remboursement total (doit √©chouer)"
}